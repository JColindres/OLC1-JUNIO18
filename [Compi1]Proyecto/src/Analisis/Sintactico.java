
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 26 14:29:09 CST 2018
//----------------------------------------------------

package Analisis;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 26 14:29:09 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\277\000\002\002\004\000\002\040\002\000\002\002" +
    "\006\000\002\002\003\000\002\041\002\000\002\042\002" +
    "\000\002\003\012\000\002\043\002\000\002\044\002\000" +
    "\002\003\010\000\002\045\002\000\002\046\002\000\002" +
    "\003\011\000\002\003\004\000\002\003\002\000\002\037" +
    "\005\000\002\004\004\000\002\047\002\000\002\050\002" +
    "\000\002\004\012\000\002\051\002\000\002\004\005\000" +
    "\002\052\002\000\002\004\005\000\002\053\002\000\002" +
    "\004\005\000\002\004\004\000\002\004\004\000\002\004" +
    "\002\000\002\035\004\000\002\035\004\000\002\035\002" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\007\000\002\005\007\000\002\005\007\000\002\005" +
    "\007\000\002\005\007\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\054\002\000\002\007" +
    "\010\000\002\055\002\000\002\007\010\000\002\056\002" +
    "\000\002\007\010\000\002\057\002\000\002\007\010\000" +
    "\002\060\002\000\002\007\010\000\002\061\002\000\002" +
    "\007\010\000\002\062\002\000\002\063\002\000\002\011" +
    "\012\000\002\011\002\000\002\064\002\000\002\065\002" +
    "\000\002\012\012\000\002\066\002\000\002\067\002\000" +
    "\002\012\011\000\002\012\002\000\002\070\002\000\002" +
    "\014\010\000\002\071\002\000\002\015\006\000\002\015" +
    "\004\000\002\072\002\000\002\015\006\000\002\015\004" +
    "\000\002\015\002\000\002\073\002\000\002\016\010\000" +
    "\002\017\003\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\006\000\002\010\002\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\023\006\000\002\074\002\000\002\024\005\000" +
    "\002\024\004\000\002\075\002\000\002\024\005\000\002" +
    "\076\002\000\002\024\005\000\002\024\006\000\002\024" +
    "\006\000\002\024\002\000\002\027\007\000\002\025\005" +
    "\000\002\025\012\000\002\025\005\000\002\025\007\000" +
    "\002\025\007\000\002\025\012\000\002\025\005\000\002" +
    "\025\007\000\002\025\007\000\002\025\012\000\002\025" +
    "\005\000\002\025\007\000\002\025\007\000\002\030\005" +
    "\000\002\030\004\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\026\007\000\002\026\006\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\002\000\002\033" +
    "\004\000\002\033\004\000\002\033\004\000\002\033\002" +
    "\000\002\013\007\000\002\036\003\000\002\036\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\006\004\004\164\006\001\002\000\012\005" +
    "\000\006\000\010\000\164\000\001\002\000\004\002\ufffe" +
    "\001\002\000\042\125\032\126\030\127\026\130\023\131" +
    "\025\132\034\133\014\151\uff6f\152\027\164\uff6f\175\035" +
    "\176\031\177\012\200\011\201\022\202\020\001\002\000" +
    "\004\002\010\001\002\000\004\002\001\001\002\000\122" +
    "\007\uffd0\013\uffd0\015\uffd0\017\uffd0\021\uffd0\023\uffd0\025" +
    "\uffd0\027\uffd0\033\uffd0\035\uffd0\043\uffd0\044\uffd0\125\uffd0" +
    "\126\uffd0\127\uffd0\130\uffd0\131\uffd0\132\uffd0\133\uffd0\135" +
    "\uffd0\136\uffd0\137\uffd0\140\uffd0\141\uffd0\142\uffd0\143\uffd0" +
    "\144\uffd0\145\uffd0\146\uffd0\147\uffd0\151\uffd0\152\uffd0\153" +
    "\uffd0\164\uffd0\175\uffd0\176\uffd0\177\uffd0\200\uffd0\201\uffd0" +
    "\202\uffd0\001\002\000\122\007\uffd1\013\uffd1\015\uffd1\017" +
    "\uffd1\021\uffd1\023\uffd1\025\uffd1\027\uffd1\033\uffd1\035\uffd1" +
    "\043\uffd1\044\uffd1\125\uffd1\126\uffd1\127\uffd1\130\uffd1\131" +
    "\uffd1\132\uffd1\133\uffd1\135\uffd1\136\uffd1\137\uffd1\140\uffd1" +
    "\141\uffd1\142\uffd1\143\uffd1\144\uffd1\145\uffd1\146\uffd1\147" +
    "\uffd1\151\uffd1\152\uffd1\153\uffd1\164\uffd1\175\uffd1\176\uffd1" +
    "\177\uffd1\200\uffd1\201\uffd1\202\uffd1\001\002\000\042\125" +
    "\032\126\030\127\026\130\023\131\025\132\034\133\014" +
    "\151\uff6f\152\027\164\uff6f\175\035\176\031\177\012\200" +
    "\011\201\022\202\020\001\002\000\004\156\202\001\002" +
    "\000\006\151\177\164\uff43\001\002\000\042\125\uff75\126" +
    "\uff75\127\uff75\130\uff75\131\uff75\132\uff75\133\uff75\151\uff75" +
    "\152\uff75\164\uff75\175\uff75\176\uff75\177\uff75\200\uff75\201" +
    "\uff75\202\uff75\001\002\000\054\125\uff73\126\uff73\127\uff73" +
    "\130\uff73\131\uff73\132\uff73\133\uff73\135\101\136\070\137" +
    "\065\140\063\141\073\151\uff73\152\uff73\164\uff73\175\uff73" +
    "\176\uff73\177\uff73\200\uff73\201\uff73\202\uff73\001\002\000" +
    "\122\007\uffcd\013\uffcd\015\uffcd\017\uffcd\021\uffcd\023\uffcd" +
    "\025\uffcd\027\uffcd\033\uffcd\035\uffcd\043\uffcd\044\uffcd\125" +
    "\uffcd\126\uffcd\127\uffcd\130\uffcd\131\uffcd\132\uffcd\133\uffcd" +
    "\135\uffcd\136\uffcd\137\uffcd\140\uffcd\141\uffcd\142\uffcd\143" +
    "\uffcd\144\uffcd\145\uffcd\146\uffcd\147\uffcd\151\uffcd\152\uffcd" +
    "\153\uffcd\164\uffcd\175\uffcd\176\uffcd\177\uffcd\200\uffcd\201" +
    "\uffcd\202\uffcd\001\002\000\004\175\167\001\002\000\122" +
    "\007\uffcf\013\uffcf\015\uffcf\017\uffcf\021\uffcf\023\uffcf\025" +
    "\uffcf\027\uffcf\033\uffcf\035\uffcf\043\uffcf\044\uffcf\125\uffcf" +
    "\126\uffcf\127\uffcf\130\uffcf\131\uffcf\132\uffcf\133\uffcf\135" +
    "\uffcf\136\uffcf\137\uffcf\140\uffcf\141\uffcf\142\uffcf\143\uffcf" +
    "\144\uffcf\145\uffcf\146\uffcf\147\uffcf\151\uffcf\152\uffcf\153" +
    "\uffcf\164\uffcf\175\uffcf\176\uffcf\177\uffcf\200\uffcf\201\uffcf" +
    "\202\uffcf\001\002\000\004\175\uff55\001\002\000\042\125" +
    "\uff78\126\uff78\127\uff78\130\uff78\131\uff78\132\uff78\133\uff78" +
    "\151\uff78\152\uff78\164\uff78\175\uff78\176\uff78\177\uff78\200" +
    "\uff78\201\uff78\202\uff78\001\002\000\004\175\uff57\001\002" +
    "\000\004\175\uff56\001\002\000\016\175\163\176\031\177" +
    "\012\200\011\201\022\202\020\001\002\000\004\175\uff59" +
    "\001\002\000\122\007\uffd2\013\uffd2\015\uffd2\017\uffd2\021" +
    "\uffd2\023\uffd2\025\uffd2\027\uffd2\033\uffd2\035\uffd2\043\uffd2" +
    "\044\uffd2\125\uffd2\126\uffd2\127\uffd2\130\uffd2\131\uffd2\132" +
    "\uffd2\133\uffd2\135\uffd2\136\uffd2\137\uffd2\140\uffd2\141\uffd2" +
    "\142\uffd2\143\uffd2\144\uffd2\145\uffd2\146\uffd2\147\uffd2\151" +
    "\uffd2\152\uffd2\153\uffd2\164\uffd2\175\uffd2\176\uffd2\177\uffd2" +
    "\200\uffd2\201\uffd2\202\uffd2\001\002\000\004\175\uff58\001" +
    "\002\000\122\007\uffd3\013\uffd3\015\uffd3\017\uffd3\021\uffd3" +
    "\023\uffd3\025\uffd3\027\uffd3\033\uffd3\035\uffd3\043\uffd3\044" +
    "\uffd3\125\uffd3\126\uffd3\127\uffd3\130\uffd3\131\uffd3\132\uffd3" +
    "\133\uffd3\135\uffd3\136\uffd3\137\uffd3\140\uffd3\141\uffd3\142" +
    "\uffd3\143\uffd3\144\uffd3\145\uffd3\146\uffd3\147\uffd3\151\uffd3" +
    "\152\027\153\uffd3\164\uffd3\175\055\176\031\177\012\200" +
    "\011\201\022\202\020\001\002\000\004\152\157\001\002" +
    "\000\070\125\uffce\126\uffce\127\uffce\130\uffce\131\uffce\132" +
    "\uffce\133\uffce\135\uffce\136\uffce\137\uffce\140\uffce\141\uffce" +
    "\150\037\151\uffce\152\uffce\157\043\160\041\161\044\162" +
    "\036\163\042\164\uffce\175\uffce\176\uffce\177\uffce\200\uffce" +
    "\201\uffce\202\uffce\001\002\000\032\133\uff53\151\uff53\152" +
    "\uff53\165\uff53\166\uff53\167\uff53\175\uff53\176\uff53\177\uff53" +
    "\200\uff53\201\uff53\202\uff53\001\002\000\032\133\uff51\151" +
    "\uff51\152\uff51\165\uff51\166\uff51\167\uff51\175\uff51\176\uff51" +
    "\177\uff51\200\uff51\201\uff51\202\uff51\001\002\000\032\133" +
    "\014\151\uff46\152\053\165\056\166\054\167\052\175\055" +
    "\176\031\177\012\200\011\201\022\202\020\001\002\000" +
    "\054\125\uffd5\126\uffd5\127\uffd5\130\uffd5\131\uffd5\132\uffd5" +
    "\133\uffd5\135\uffd5\136\uffd5\137\uffd5\140\uffd5\141\uffd5\151" +
    "\047\152\uffd5\164\uffd5\175\uffd5\176\uffd5\177\uffd5\200\uffd5" +
    "\201\uffd5\202\uffd5\001\002\000\032\133\uff52\151\uff52\152" +
    "\uff52\165\uff52\166\uff52\167\uff52\175\uff52\176\uff52\177\uff52" +
    "\200\uff52\201\uff52\202\uff52\001\002\000\054\125\uffd6\126" +
    "\uffd6\127\uffd6\130\uffd6\131\uffd6\132\uffd6\133\uffd6\135\uffd6" +
    "\136\uffd6\137\uffd6\140\uffd6\141\uffd6\151\045\152\uffd6\164" +
    "\uffd6\175\uffd6\176\uffd6\177\uffd6\200\uffd6\201\uffd6\202\uffd6" +
    "\001\002\000\032\133\uff54\151\uff54\152\uff54\165\uff54\166" +
    "\uff54\167\uff54\175\uff54\176\uff54\177\uff54\200\uff54\201\uff54" +
    "\202\uff54\001\002\000\042\125\032\126\030\127\026\130" +
    "\023\131\025\132\034\133\014\151\uff6f\152\027\164\uff6f" +
    "\175\035\176\031\177\012\200\011\201\022\202\020\001" +
    "\002\000\006\151\uff71\164\uff71\001\002\000\042\125\032" +
    "\126\030\127\026\130\023\131\025\132\034\133\014\151" +
    "\uff6f\152\027\164\uff6f\175\035\176\031\177\012\200\011" +
    "\201\022\202\020\001\002\000\006\151\uff70\164\uff70\001" +
    "\002\000\006\151\uff5d\153\uff5d\001\002\000\004\152\124" +
    "\001\002\000\020\152\027\175\055\176\031\177\012\200" +
    "\011\201\022\202\020\001\002\000\004\152\124\001\002" +
    "\000\126\007\uffce\013\uffce\015\uffce\017\uffce\021\uffce\023" +
    "\uffce\025\uffce\027\uffce\033\uffce\035\uffce\043\uffce\044\uffce" +
    "\125\uffce\126\uffce\127\uffce\130\uffce\131\uffce\132\uffce\133" +
    "\uffce\135\uffce\136\uffce\137\uffce\140\uffce\141\uffce\142\uffce" +
    "\143\uffce\144\uffce\145\uffce\146\uffce\147\uffce\151\uffce\152" +
    "\uffce\153\uffce\157\132\160\131\164\uffce\175\uffce\176\uffce" +
    "\177\uffce\200\uffce\201\uffce\202\uffce\001\002\000\004\152" +
    "\124\001\002\000\006\151\uff5e\153\uff5e\001\002\000\004" +
    "\151\122\001\002\000\006\151\uff5c\153\uff5c\001\002\000" +
    "\034\135\075\136\070\137\065\140\063\141\073\142\071" +
    "\143\072\144\076\145\064\146\066\147\067\151\uff4a\153" +
    "\uff4a\001\002\000\020\152\027\175\055\176\031\177\012" +
    "\200\011\201\022\202\020\001\002\000\020\152\027\175" +
    "\055\176\031\177\012\200\011\201\022\202\020\001\002" +
    "\000\020\152\027\175\055\176\031\177\012\200\011\201" +
    "\022\202\020\001\002\000\020\152\027\175\055\176\031" +
    "\177\012\200\011\201\022\202\020\001\002\000\020\152" +
    "\027\175\055\176\031\177\012\200\011\201\022\202\020" +
    "\001\002\000\020\152\027\175\055\176\031\177\012\200" +
    "\011\201\022\202\020\001\002\000\020\152\027\175\055" +
    "\176\031\177\012\200\011\201\022\202\020\001\002\000" +
    "\020\152\027\175\055\176\031\177\012\200\011\201\022" +
    "\202\020\001\002\000\020\152\027\175\055\176\031\177" +
    "\012\200\011\201\022\202\020\001\002\000\006\151\uff5f" +
    "\153\uff5f\001\002\000\022\133\014\152\027\175\055\176" +
    "\031\177\012\200\011\201\022\202\020\001\002\000\020" +
    "\152\027\175\055\176\031\177\012\200\011\201\022\202" +
    "\020\001\002\000\034\135\101\136\070\137\065\140\063" +
    "\141\073\142\071\143\072\144\076\145\064\146\066\147" +
    "\067\151\uff4a\153\uff4a\001\002\000\006\151\uff4f\153\uff4f" +
    "\001\002\000\020\152\027\175\055\176\031\177\012\200" +
    "\011\201\022\202\020\001\002\000\122\007\uffe1\013\uffe1" +
    "\015\uffe1\017\uffe1\021\uffe1\023\uffe1\025\uffe1\027\uffe1\033" +
    "\uffe1\035\uffe1\043\uffe1\044\uffe1\125\uffe1\126\uffe1\127\uffe1" +
    "\130\uffe1\131\uffe1\132\uffe1\133\uffe1\135\uffe1\136\uffe1\137" +
    "\065\140\063\141\073\142\uffe1\143\uffe1\144\uffe1\145\uffe1" +
    "\146\uffe1\147\uffe1\151\uffe1\152\uffe1\153\uffe1\164\uffe1\175" +
    "\uffe1\176\uffe1\177\uffe1\200\uffe1\201\uffe1\202\uffe1\001\002" +
    "\000\006\151\uff60\153\uff60\001\002\000\122\007\uffdd\013" +
    "\uffdd\015\uffdd\017\uffdd\021\uffdd\023\uffdd\025\uffdd\027\uffdd" +
    "\033\uffdd\035\uffdd\043\uffdd\044\uffdd\125\uffdd\126\uffdd\127" +
    "\uffdd\130\uffdd\131\uffdd\132\uffdd\133\uffdd\135\uffdd\136\uffdd" +
    "\137\uffdd\140\uffdd\141\uffdd\142\uffdd\143\uffdd\144\uffdd\145" +
    "\uffdd\146\uffdd\147\uffdd\151\uffdd\152\uffdd\153\uffdd\164\uffdd" +
    "\175\uffdd\176\uffdd\177\uffdd\200\uffdd\201\uffdd\202\uffdd\001" +
    "\002\000\034\135\101\136\070\137\065\140\063\141\073" +
    "\142\071\143\072\144\076\145\064\146\066\147\067\151" +
    "\uff4a\153\uff4a\001\002\000\006\151\uff4e\153\uff4e\001\002" +
    "\000\034\135\101\136\070\137\065\140\063\141\073\142" +
    "\071\143\072\144\076\145\064\146\066\147\067\151\uff4a" +
    "\153\uff4a\001\002\000\006\151\uff50\153\uff50\001\002\000" +
    "\122\007\uffe0\013\uffe0\015\uffe0\017\uffe0\021\uffe0\023\uffe0" +
    "\025\uffe0\027\uffe0\033\uffe0\035\uffe0\043\uffe0\044\uffe0\125" +
    "\uffe0\126\uffe0\127\uffe0\130\uffe0\131\uffe0\132\uffe0\133\uffe0" +
    "\135\uffe0\136\uffe0\137\065\140\063\141\073\142\uffe0\143" +
    "\uffe0\144\uffe0\145\uffe0\146\uffe0\147\uffe0\151\uffe0\152\uffe0" +
    "\153\uffe0\164\uffe0\175\uffe0\176\uffe0\177\uffe0\200\uffe0\201" +
    "\uffe0\202\uffe0\001\002\000\034\135\101\136\070\137\065" +
    "\140\063\141\073\142\071\143\072\144\076\145\064\146" +
    "\066\147\067\151\uff4a\153\uff4a\001\002\000\006\151\uff4b" +
    "\153\uff4b\001\002\000\034\135\101\136\070\137\065\140" +
    "\063\141\073\142\071\143\072\144\076\145\064\146\066" +
    "\147\067\151\uff4a\153\uff4a\001\002\000\006\151\uff4c\153" +
    "\uff4c\001\002\000\122\007\uffdf\013\uffdf\015\uffdf\017\uffdf" +
    "\021\uffdf\023\uffdf\025\uffdf\027\uffdf\033\uffdf\035\uffdf\043" +
    "\uffdf\044\uffdf\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf" +
    "\132\uffdf\133\uffdf\135\uffdf\136\uffdf\137\uffdf\140\uffdf\141" +
    "\uffdf\142\uffdf\143\uffdf\144\uffdf\145\uffdf\146\uffdf\147\uffdf" +
    "\151\uffdf\152\uffdf\153\uffdf\164\uffdf\175\uffdf\176\uffdf\177" +
    "\uffdf\200\uffdf\201\uffdf\202\uffdf\001\002\000\034\135\101" +
    "\136\070\137\065\140\063\141\073\142\071\143\072\144" +
    "\076\145\064\146\066\147\067\151\uff4a\153\uff4a\001\002" +
    "\000\006\151\uff4d\153\uff4d\001\002\000\122\007\uffde\013" +
    "\uffde\015\uffde\017\uffde\021\uffde\023\uffde\025\uffde\027\uffde" +
    "\033\uffde\035\uffde\043\uffde\044\uffde\125\uffde\126\uffde\127" +
    "\uffde\130\uffde\131\uffde\132\uffde\133\uffde\135\uffde\136\uffde" +
    "\137\uffde\140\uffde\141\uffde\142\uffde\143\uffde\144\uffde\145" +
    "\uffde\146\uffde\147\uffde\151\uffde\152\uffde\153\uffde\164\uffde" +
    "\175\uffde\176\uffde\177\uffde\200\uffde\201\uffde\202\uffde\001" +
    "\002\000\042\125\uff5a\126\uff5a\127\uff5a\130\uff5a\131\uff5a" +
    "\132\uff5a\133\uff5a\151\uff5a\152\uff5a\164\uff5a\175\uff5a\176" +
    "\uff5a\177\uff5a\200\uff5a\201\uff5a\202\uff5a\001\002\000\006" +
    "\151\uff49\153\uff49\001\002\000\020\152\027\175\055\176" +
    "\031\177\012\200\011\201\022\202\020\001\002\000\032" +
    "\135\101\136\070\137\065\140\063\141\073\142\071\143" +
    "\072\144\076\145\064\146\066\147\067\153\uff4a\001\002" +
    "\000\004\153\127\001\002\000\014\151\uff46\153\uff46\165" +
    "\056\166\054\167\052\001\002\000\006\151\uff45\153\uff45" +
    "\001\002\000\122\007\uffd5\013\uffd5\015\uffd5\017\uffd5\021" +
    "\uffd5\023\uffd5\025\uffd5\027\uffd5\033\uffd5\035\uffd5\043\uffd5" +
    "\044\uffd5\125\uffd5\126\uffd5\127\uffd5\130\uffd5\131\uffd5\132" +
    "\uffd5\133\uffd5\135\uffd5\136\uffd5\137\uffd5\140\uffd5\141\uffd5" +
    "\142\uffd5\143\uffd5\144\uffd5\145\uffd5\146\uffd5\147\uffd5\151" +
    "\uffd5\152\uffd5\153\uffd5\164\uffd5\175\uffd5\176\uffd5\177\uffd5" +
    "\200\uffd5\201\uffd5\202\uffd5\001\002\000\122\007\uffd6\013" +
    "\uffd6\015\uffd6\017\uffd6\021\uffd6\023\uffd6\025\uffd6\027\uffd6" +
    "\033\uffd6\035\uffd6\043\uffd6\044\uffd6\125\uffd6\126\uffd6\127" +
    "\uffd6\130\uffd6\131\uffd6\132\uffd6\133\uffd6\135\uffd6\136\uffd6" +
    "\137\uffd6\140\uffd6\141\uffd6\142\uffd6\143\uffd6\144\uffd6\145" +
    "\uffd6\146\uffd6\147\uffd6\151\uffd6\152\uffd6\153\uffd6\164\uffd6" +
    "\175\uffd6\176\uffd6\177\uffd6\200\uffd6\201\uffd6\202\uffd6\001" +
    "\002\000\006\151\uff48\153\uff48\001\002\000\050\135\143" +
    "\136\140\137\137\140\135\141\141\142\uffd3\143\uffd3\144" +
    "\uffd3\145\uffd3\146\uffd3\147\uffd3\152\027\153\136\175\055" +
    "\176\031\177\012\200\011\201\022\202\020\001\002\000" +
    "\020\152\027\175\055\176\031\177\012\200\011\201\022" +
    "\202\020\001\002\000\122\007\uffdc\013\uffdc\015\uffdc\017" +
    "\uffdc\021\uffdc\023\uffdc\025\uffdc\027\uffdc\033\uffdc\035\uffdc" +
    "\043\uffdc\044\uffdc\125\uffdc\126\uffdc\127\uffdc\130\uffdc\131" +
    "\uffdc\132\uffdc\133\uffdc\135\uffdc\136\uffdc\137\uffdc\140\uffdc" +
    "\141\uffdc\142\uffdc\143\uffdc\144\uffdc\145\uffdc\146\uffdc\147" +
    "\uffdc\151\uffdc\152\uffdc\153\uffdc\164\uffdc\175\uffdc\176\uffdc" +
    "\177\uffdc\200\uffdc\201\uffdc\202\uffdc\001\002\000\020\152" +
    "\027\175\055\176\031\177\012\200\011\201\022\202\020" +
    "\001\002\000\020\152\027\175\055\176\031\177\012\200" +
    "\011\201\022\202\020\001\002\000\020\152\027\175\055" +
    "\176\031\177\012\200\011\201\022\202\020\001\002\000" +
    "\122\007\uffd4\013\uffd4\015\uffd4\017\uffd4\021\uffd4\023\uffd4" +
    "\025\uffd4\027\uffd4\033\uffd4\035\uffd4\043\uffd4\044\uffd4\125" +
    "\uffd4\126\uffd4\127\uffd4\130\uffd4\131\uffd4\132\uffd4\133\uffd4" +
    "\135\101\136\070\137\065\140\063\141\073\142\uffd4\143" +
    "\uffd4\144\uffd4\145\uffd4\146\uffd4\147\uffd4\151\uffd4\152\uffd4" +
    "\153\uffd4\164\uffd4\175\uffd4\176\uffd4\177\uffd4\200\uffd4\201" +
    "\uffd4\202\uffd4\001\002\000\020\152\027\175\055\176\031" +
    "\177\012\200\011\201\022\202\020\001\002\000\016\135" +
    "\101\136\070\137\065\140\063\141\073\153\145\001\002" +
    "\000\122\007\uffdb\013\uffdb\015\uffdb\017\uffdb\021\uffdb\023" +
    "\uffdb\025\uffdb\027\uffdb\033\uffdb\035\uffdb\043\uffdb\044\uffdb" +
    "\125\uffdb\126\uffdb\127\uffdb\130\uffdb\131\uffdb\132\uffdb\133" +
    "\uffdb\135\uffdb\136\uffdb\137\uffdb\140\uffdb\141\uffdb\142\uffdb" +
    "\143\uffdb\144\uffdb\145\uffdb\146\uffdb\147\uffdb\151\uffdb\152" +
    "\uffdb\153\uffdb\164\uffdb\175\uffdb\176\uffdb\177\uffdb\200\uffdb" +
    "\201\uffdb\202\uffdb\001\002\000\016\135\101\136\070\137" +
    "\065\140\063\141\073\153\147\001\002\000\122\007\uffd7" +
    "\013\uffd7\015\uffd7\017\uffd7\021\uffd7\023\uffd7\025\uffd7\027" +
    "\uffd7\033\uffd7\035\uffd7\043\uffd7\044\uffd7\125\uffd7\126\uffd7" +
    "\127\uffd7\130\uffd7\131\uffd7\132\uffd7\133\uffd7\135\uffd7\136" +
    "\uffd7\137\uffd7\140\uffd7\141\uffd7\142\uffd7\143\uffd7\144\uffd7" +
    "\145\uffd7\146\uffd7\147\uffd7\151\uffd7\152\uffd7\153\uffd7\164" +
    "\uffd7\175\uffd7\176\uffd7\177\uffd7\200\uffd7\201\uffd7\202\uffd7" +
    "\001\002\000\016\135\101\136\070\137\065\140\063\141" +
    "\073\153\151\001\002\000\122\007\uffda\013\uffda\015\uffda" +
    "\017\uffda\021\uffda\023\uffda\025\uffda\027\uffda\033\uffda\035" +
    "\uffda\043\uffda\044\uffda\125\uffda\126\uffda\127\uffda\130\uffda" +
    "\131\uffda\132\uffda\133\uffda\135\uffda\136\uffda\137\uffda\140" +
    "\uffda\141\uffda\142\uffda\143\uffda\144\uffda\145\uffda\146\uffda" +
    "\147\uffda\151\uffda\152\uffda\153\uffda\164\uffda\175\uffda\176" +
    "\uffda\177\uffda\200\uffda\201\uffda\202\uffda\001\002\000\016" +
    "\135\101\136\070\137\065\140\063\141\073\153\153\001" +
    "\002\000\122\007\uffd9\013\uffd9\015\uffd9\017\uffd9\021\uffd9" +
    "\023\uffd9\025\uffd9\027\uffd9\033\uffd9\035\uffd9\043\uffd9\044" +
    "\uffd9\125\uffd9\126\uffd9\127\uffd9\130\uffd9\131\uffd9\132\uffd9" +
    "\133\uffd9\135\uffd9\136\uffd9\137\uffd9\140\uffd9\141\uffd9\142" +
    "\uffd9\143\uffd9\144\uffd9\145\uffd9\146\uffd9\147\uffd9\151\uffd9" +
    "\152\uffd9\153\uffd9\164\uffd9\175\uffd9\176\uffd9\177\uffd9\200" +
    "\uffd9\201\uffd9\202\uffd9\001\002\000\016\135\101\136\070" +
    "\137\065\140\063\141\073\153\155\001\002\000\122\007" +
    "\uffd8\013\uffd8\015\uffd8\017\uffd8\021\uffd8\023\uffd8\025\uffd8" +
    "\027\uffd8\033\uffd8\035\uffd8\043\uffd8\044\uffd8\125\uffd8\126" +
    "\uffd8\127\uffd8\130\uffd8\131\uffd8\132\uffd8\133\uffd8\135\uffd8" +
    "\136\uffd8\137\uffd8\140\uffd8\141\uffd8\142\uffd8\143\uffd8\144" +
    "\uffd8\145\uffd8\146\uffd8\147\uffd8\151\uffd8\152\uffd8\153\uffd8" +
    "\164\uffd8\175\uffd8\176\uffd8\177\uffd8\200\uffd8\201\uffd8\202" +
    "\uffd8\001\002\000\006\151\uff47\153\uff47\001\002\000\032" +
    "\133\014\152\053\153\uff46\165\056\166\054\167\052\175" +
    "\055\176\031\177\012\200\011\201\022\202\020\001\002" +
    "\000\004\153\161\001\002\000\004\151\162\001\002\000" +
    "\042\125\uff6e\126\uff6e\127\uff6e\130\uff6e\131\uff6e\132\uff6e" +
    "\133\uff6e\151\uff6e\152\uff6e\164\uff6e\175\uff6e\176\uff6e\177" +
    "\uff6e\200\uff6e\201\uff6e\202\uff6e\001\002\000\016\135\uffce" +
    "\136\uffce\137\uffce\140\uffce\141\uffce\153\uffce\001\002\000" +
    "\016\135\143\136\140\137\137\140\135\141\141\153\136" +
    "\001\002\000\042\125\032\126\030\127\026\130\023\131" +
    "\025\132\034\133\014\151\uff6f\152\027\164\uff6f\175\035" +
    "\176\031\177\012\200\011\201\022\202\020\001\002\000" +
    "\006\151\uff77\164\uff77\001\002\000\012\150\037\161\044" +
    "\162\036\163\042\001\002\000\032\133\014\151\uff46\152" +
    "\053\165\056\166\054\167\052\175\055\176\031\177\012" +
    "\200\011\201\022\202\020\001\002\000\004\151\172\001" +
    "\002\000\042\125\uff5b\126\uff5b\127\uff5b\130\uff5b\131\uff5b" +
    "\132\uff5b\133\uff5b\151\uff5b\152\uff5b\164\uff5b\175\uff5b\176" +
    "\uff5b\177\uff5b\200\uff5b\201\uff5b\202\uff5b\001\002\000\042" +
    "\125\032\126\030\127\026\130\023\131\025\132\034\133" +
    "\014\151\uff6f\152\027\164\uff6f\175\035\176\031\177\012" +
    "\200\011\201\022\202\020\001\002\000\006\151\uff72\164" +
    "\uff72\001\002\000\042\125\032\126\030\127\026\130\023" +
    "\131\025\132\034\133\014\151\uff6f\152\027\164\uff6f\175" +
    "\035\176\031\177\012\200\011\201\022\202\020\001\002" +
    "\000\006\151\uff74\164\uff74\001\002\000\004\164\uff44\001" +
    "\002\000\004\164\201\001\002\000\112\002\uff79\005\uff79" +
    "\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014" +
    "\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79\022\uff79" +
    "\023\uff79\024\uff79\025\uff79\027\uff79\030\uff79\033\uff79\035" +
    "\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79" +
    "\152\uff79\164\uff79\175\uff79\176\uff79\177\uff79\200\uff79\201" +
    "\uff79\202\uff79\001\002\000\012\134\203\170\206\171\204" +
    "\172\205\001\002\000\044\125\uff6d\126\uff6d\127\uff6d\130" +
    "\uff6d\131\uff6d\132\uff6d\133\uff6d\151\uff6d\152\uff6d\153\uff6d" +
    "\164\uff6d\175\uff6d\176\uff6d\177\uff6d\200\uff6d\201\uff6d\202" +
    "\uff6d\001\002\000\050\125\uff67\126\uff67\127\uff67\130\uff67" +
    "\131\uff67\132\uff67\133\uff67\151\uff67\152\uff67\153\uff67\154" +
    "\230\156\227\164\uff67\175\uff67\176\uff67\177\uff67\200\uff67" +
    "\201\uff67\202\uff67\001\002\000\050\125\uff63\126\uff63\127" +
    "\uff63\130\uff63\131\uff63\132\uff63\133\uff63\151\uff63\152\uff63" +
    "\153\uff63\154\220\156\217\164\uff63\175\uff63\176\uff63\177" +
    "\uff63\200\uff63\201\uff63\202\uff63\001\002\000\050\125\uff6b" +
    "\126\uff6b\127\uff6b\130\uff6b\131\uff6b\132\uff6b\133\uff6b\151" +
    "\uff6b\152\uff6b\153\uff6b\154\210\156\207\164\uff6b\175\uff6b" +
    "\176\uff6b\177\uff6b\200\uff6b\201\uff6b\202\uff6b\001\002\000" +
    "\006\173\215\174\216\001\002\000\004\176\211\001\002" +
    "\000\004\155\212\001\002\000\004\156\213\001\002\000" +
    "\004\173\214\001\002\000\044\125\uff6c\126\uff6c\127\uff6c" +
    "\130\uff6c\131\uff6c\132\uff6c\133\uff6c\151\uff6c\152\uff6c\153" +
    "\uff6c\164\uff6c\175\uff6c\176\uff6c\177\uff6c\200\uff6c\201\uff6c" +
    "\202\uff6c\001\002\000\044\125\uff6a\126\uff6a\127\uff6a\130" +
    "\uff6a\131\uff6a\132\uff6a\133\uff6a\151\uff6a\152\uff6a\153\uff6a" +
    "\164\uff6a\175\uff6a\176\uff6a\177\uff6a\200\uff6a\201\uff6a\202" +
    "\uff6a\001\002\000\044\125\uff69\126\uff69\127\uff69\130\uff69" +
    "\131\uff69\132\uff69\133\uff69\151\uff69\152\uff69\153\uff69\164" +
    "\uff69\175\uff69\176\uff69\177\uff69\200\uff69\201\uff69\202\uff69" +
    "\001\002\000\006\173\225\174\226\001\002\000\004\176" +
    "\221\001\002\000\004\155\222\001\002\000\004\156\223" +
    "\001\002\000\004\173\224\001\002\000\044\125\uff64\126" +
    "\uff64\127\uff64\130\uff64\131\uff64\132\uff64\133\uff64\151\uff64" +
    "\152\uff64\153\uff64\164\uff64\175\uff64\176\uff64\177\uff64\200" +
    "\uff64\201\uff64\202\uff64\001\002\000\044\125\uff62\126\uff62" +
    "\127\uff62\130\uff62\131\uff62\132\uff62\133\uff62\151\uff62\152" +
    "\uff62\153\uff62\164\uff62\175\uff62\176\uff62\177\uff62\200\uff62" +
    "\201\uff62\202\uff62\001\002\000\044\125\uff61\126\uff61\127" +
    "\uff61\130\uff61\131\uff61\132\uff61\133\uff61\151\uff61\152\uff61" +
    "\153\uff61\164\uff61\175\uff61\176\uff61\177\uff61\200\uff61\201" +
    "\uff61\202\uff61\001\002\000\006\173\235\174\236\001\002" +
    "\000\004\176\231\001\002\000\004\155\232\001\002\000" +
    "\004\156\233\001\002\000\004\173\234\001\002\000\044" +
    "\125\uff68\126\uff68\127\uff68\130\uff68\131\uff68\132\uff68\133" +
    "\uff68\151\uff68\152\uff68\153\uff68\164\uff68\175\uff68\176\uff68" +
    "\177\uff68\200\uff68\201\uff68\202\uff68\001\002\000\044\125" +
    "\uff66\126\uff66\127\uff66\130\uff66\131\uff66\132\uff66\133\uff66" +
    "\151\uff66\152\uff66\153\uff66\164\uff66\175\uff66\176\uff66\177" +
    "\uff66\200\uff66\201\uff66\202\uff66\001\002\000\044\125\uff65" +
    "\126\uff65\127\uff65\130\uff65\131\uff65\132\uff65\133\uff65\151" +
    "\uff65\152\uff65\153\uff65\164\uff65\175\uff65\176\uff65\177\uff65" +
    "\200\uff65\201\uff65\202\uff65\001\002\000\006\151\uff76\164" +
    "\uff76\001\002\000\012\005\ufff3\006\241\010\245\164\006" +
    "\001\002\000\026\007\ufffa\026\u012e\152\ufffa\164\ufffa\175" +
    "\ufffa\176\ufffa\177\ufffa\200\ufffa\201\ufffa\202\ufffa\001\002" +
    "\000\014\005\ufff3\006\241\010\245\011\ufff3\164\006\001" +
    "\002\000\004\005\u012b\001\002\000\040\006\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\014\ufff7\016\ufff7\020\ufff7\022\ufff7\024" +
    "\ufff7\030\ufff7\040\ufff7\042\ufff7\044\ufff7\045\ufff7\164\ufff7" +
    "\001\002\000\014\046\247\047\251\050\252\051\246\144" +
    "\uffa5\001\002\000\004\150\265\001\002\000\004\150\262" +
    "\001\002\000\004\144\261\001\002\000\004\150\256\001" +
    "\002\000\004\150\253\001\002\000\004\200\254\001\002" +
    "\000\014\046\247\047\251\050\252\051\246\144\uffa5\001" +
    "\002\000\004\144\uffa7\001\002\000\004\200\257\001\002" +
    "\000\014\046\247\047\251\050\252\051\246\144\uffa5\001" +
    "\002\000\004\144\uffa8\001\002\000\040\006\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\014\ufff2\016\ufff2\020\ufff2\022\ufff2\024" +
    "\ufff2\030\ufff2\040\ufff2\042\ufff2\044\ufff2\045\ufff2\164\ufff2" +
    "\001\002\000\004\200\263\001\002\000\014\046\247\047" +
    "\251\050\252\051\246\144\uffa5\001\002\000\004\144\uffa9" +
    "\001\002\000\004\200\266\001\002\000\014\046\247\047" +
    "\251\050\252\051\246\144\uffa5\001\002\000\004\144\uffa6" +
    "\001\002\000\040\006\uffe5\010\uffe5\011\uffe5\012\304\014" +
    "\276\016\271\020\303\022\275\024\310\030\272\040\305" +
    "\042\274\044\307\045\306\164\006\001\002\000\014\046" +
    "\247\047\251\050\252\051\246\144\uffa5\001\002\000\014" +
    "\046\247\047\251\050\252\051\246\144\uffa5\001\002\000" +
    "\042\006\uffe5\010\uffe5\011\uffe5\012\304\014\276\016\271" +
    "\020\303\022\275\024\310\030\272\040\305\041\uffe5\042" +
    "\274\044\307\045\306\164\006\001\002\000\014\046\247" +
    "\047\251\050\252\051\246\144\uffa5\001\002\000\014\046" +
    "\247\047\251\050\252\051\246\144\uffa5\001\002\000\014" +
    "\046\247\047\251\050\252\051\246\144\uffa5\001\002\000" +
    "\012\006\241\010\245\011\ufff3\164\006\001\002\000\042" +
    "\006\uffe9\010\uffe9\011\uffe9\012\uffe9\014\uffe9\016\uffe9\020" +
    "\uffe9\022\uffe9\024\uffe9\030\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\044\uffe9\045\uffe9\164\uffe9\001\002\000\042\006\uffe5\010" +
    "\uffe5\011\uffe5\012\304\014\276\016\271\020\303\022\275" +
    "\024\310\030\272\040\305\041\uffe5\042\274\044\307\045" +
    "\306\164\006\001\002\000\042\006\uffe5\010\uffe5\011\uffe5" +
    "\012\304\014\276\016\271\020\303\022\275\024\310\030" +
    "\272\040\305\041\uffe5\042\274\044\307\045\306\164\006" +
    "\001\002\000\014\046\247\047\251\050\252\051\246\144" +
    "\uffa5\001\002\000\014\046\247\047\251\050\252\051\246" +
    "\144\uffa5\001\002\000\014\046\247\047\251\050\252\051" +
    "\246\144\uffa5\001\002\000\042\006\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\014\uffeb\016\uffeb\020\uffeb\022\uffeb\024\uffeb\030" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\044\uffeb\045\uffeb\164\uffeb" +
    "\001\002\000\042\006\uffed\010\uffed\011\uffed\012\uffed\014" +
    "\uffed\016\uffed\020\uffed\022\uffed\024\uffed\030\uffed\040\uffed" +
    "\041\uffed\042\uffed\044\uffed\045\uffed\164\uffed\001\002\000" +
    "\014\046\247\047\251\050\252\051\246\144\uffa5\001\002" +
    "\000\004\144\312\001\002\000\024\025\uffc2\152\uffc2\164" +
    "\uffc2\175\uffc2\176\uffc2\177\uffc2\200\uffc2\201\uffc2\202\uffc2" +
    "\001\002\000\024\025\uffe2\152\027\164\006\175\055\176" +
    "\031\177\012\200\011\201\022\202\020\001\002\000\004" +
    "\025\321\001\002\000\046\007\uffe2\013\uffe2\015\uffe2\017" +
    "\uffe2\021\uffe2\023\uffe2\025\uffe2\027\uffe2\033\uffe2\035\uffe2" +
    "\152\027\164\006\175\055\176\031\177\012\200\011\201" +
    "\022\202\020\001\002\000\060\007\uffe2\013\uffe2\015\uffe2" +
    "\017\uffe2\021\uffe2\023\uffe2\025\uffe2\027\uffe2\033\uffe2\035" +
    "\uffe2\135\101\136\070\137\065\140\063\141\073\152\027" +
    "\164\006\175\055\176\031\177\012\200\011\201\022\202" +
    "\020\001\002\000\026\007\uffe4\013\uffe4\015\uffe4\017\uffe4" +
    "\021\uffe4\023\uffe4\025\uffe4\027\uffe4\033\uffe4\035\uffe4\001" +
    "\002\000\026\007\uffe3\013\uffe3\015\uffe3\017\uffe3\021\uffe3" +
    "\023\uffe3\025\uffe3\027\uffe3\033\uffe3\035\uffe3\001\002\000" +
    "\042\006\uffc1\010\uffc1\011\uffc1\012\uffc1\014\uffc1\016\uffc1" +
    "\020\uffc1\022\uffc1\024\uffc1\030\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\044\uffc1\045\uffc1\164\uffc1\001\002\000\042\006\uffe5" +
    "\010\uffe5\011\uffe5\012\304\014\276\016\271\020\303\022" +
    "\275\024\310\030\272\040\305\041\uffe5\042\274\044\307" +
    "\045\306\164\006\001\002\000\014\006\uffec\010\uffec\011" +
    "\uffec\041\uffec\164\uffec\001\002\000\042\006\uffe5\010\uffe5" +
    "\011\uffe5\012\304\014\276\016\271\020\303\022\275\024" +
    "\310\030\272\040\305\041\uffe5\042\274\044\307\045\306" +
    "\164\006\001\002\000\014\006\uffea\010\uffea\011\uffea\041" +
    "\uffea\164\uffea\001\002\000\004\144\327\001\002\000\034" +
    "\012\uffac\014\uffac\016\uffac\020\uffac\022\uffac\024\uffac\030" +
    "\uffac\040\uffac\041\uffac\042\uffac\044\uffac\045\uffac\164\uffac" +
    "\001\002\000\034\012\304\014\276\016\271\020\303\022" +
    "\275\024\310\030\272\040\305\041\uffe5\042\274\044\307" +
    "\045\306\164\006\001\002\000\004\041\333\001\002\000" +
    "\004\041\uffaa\001\002\000\042\006\uffab\010\uffab\011\uffab" +
    "\012\uffab\014\uffab\016\uffab\020\uffab\022\uffab\024\uffab\030" +
    "\uffab\040\uffab\041\uffab\042\uffab\044\uffab\045\uffab\164\uffab" +
    "\001\002\000\004\144\335\001\002\000\024\013\uffcc\152" +
    "\uffcc\164\uffcc\175\uffcc\176\uffcc\177\uffcc\200\uffcc\201\uffcc" +
    "\202\uffcc\001\002\000\024\013\uffe2\152\027\164\006\175" +
    "\055\176\031\177\012\200\011\201\022\202\020\001\002" +
    "\000\004\013\340\001\002\000\042\006\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\014\uffcb\016\uffcb\020\uffcb\022\uffcb\024\uffcb" +
    "\030\uffcb\040\uffcb\041\uffcb\042\uffcb\044\uffcb\045\uffcb\164" +
    "\uffcb\001\002\000\004\144\342\001\002\000\024\021\uffc6" +
    "\152\uffc6\164\uffc6\175\uffc6\176\uffc6\177\uffc6\200\uffc6\201" +
    "\uffc6\202\uffc6\001\002\000\024\021\uffe2\152\027\164\006" +
    "\175\055\176\031\177\012\200\011\201\022\202\020\001" +
    "\002\000\004\021\345\001\002\000\042\006\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\014\uffc5\016\uffc5\020\uffc5\022\uffc5\024" +
    "\uffc5\030\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5" +
    "\164\uffc5\001\002\000\014\006\uffe7\010\uffe7\011\uffe7\041" +
    "\uffe7\164\uffe7\001\002\000\014\006\uffe6\010\uffe6\011\uffe6" +
    "\041\uffe6\164\uffe6\001\002\000\042\006\uffe5\010\uffe5\011" +
    "\uffe5\012\304\014\276\016\271\020\303\022\275\024\310" +
    "\030\272\040\305\041\uffe5\042\274\044\307\045\306\164" +
    "\006\001\002\000\014\006\uffe8\010\uffe8\011\uffe8\041\uffe8" +
    "\164\uffe8\001\002\000\004\011\353\001\002\000\014\005" +
    "\ufff6\006\ufff6\010\ufff6\011\ufff6\164\ufff6\001\002\000\014" +
    "\005\ufff3\006\241\010\245\011\ufff3\164\006\001\002\000" +
    "\006\005\ufff5\011\ufff5\001\002\000\004\144\357\001\002" +
    "\000\024\015\uffca\152\uffca\164\uffca\175\uffca\176\uffca\177" +
    "\uffca\200\uffca\201\uffca\202\uffca\001\002\000\024\015\uffe2" +
    "\152\027\164\006\175\055\176\031\177\012\200\011\201" +
    "\022\202\020\001\002\000\004\015\362\001\002\000\042" +
    "\006\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\016\uffc9\020" +
    "\uffc9\022\uffc9\024\uffc9\030\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\044\uffc9\045\uffc9\164\uffc9\001\002\000\004\144\364\001" +
    "\002\000\024\023\uffc4\152\uffc4\164\uffc4\175\uffc4\176\uffc4" +
    "\177\uffc4\200\uffc4\201\uffc4\202\uffc4\001\002\000\024\023" +
    "\uffe2\152\027\164\006\175\055\176\031\177\012\200\011" +
    "\201\022\202\020\001\002\000\004\023\367\001\002\000" +
    "\042\006\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3\016\uffc3" +
    "\020\uffc3\022\uffc3\024\uffc3\030\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\044\uffc3\045\uffc3\164\uffc3\001\002\000\004\144\371" +
    "\001\002\000\024\043\uffb5\152\uffb5\164\uffb5\175\uffb5\176" +
    "\uffb5\177\uffb5\200\uffb5\201\uffb5\202\uffb5\001\002\000\024" +
    "\043\uffad\152\027\164\006\175\055\176\031\177\012\200" +
    "\011\201\022\202\020\001\002\000\004\043\u0106\001\002" +
    "\000\026\043\uffad\044\u0103\152\027\164\006\175\055\176" +
    "\031\177\012\200\011\201\022\202\020\001\002\000\040" +
    "\043\uffad\044\377\135\101\136\070\137\065\140\063\141" +
    "\073\152\027\164\006\175\055\176\031\177\012\200\011" +
    "\201\022\202\020\001\002\000\004\043\uffb1\001\002\000" +
    "\024\043\uffb3\152\uffb3\164\uffb3\175\uffb3\176\uffb3\177\uffb3" +
    "\200\uffb3\201\uffb3\202\uffb3\001\002\000\024\043\uffad\152" +
    "\027\164\006\175\055\176\031\177\012\200\011\201\022" +
    "\202\020\001\002\000\004\043\uffb2\001\002\000\004\043" +
    "\uffae\001\002\000\024\043\uffb0\152\uffb0\164\uffb0\175\uffb0" +
    "\176\uffb0\177\uffb0\200\uffb0\201\uffb0\202\uffb0\001\002\000" +
    "\024\043\uffad\152\027\164\006\175\055\176\031\177\012" +
    "\200\011\201\022\202\020\001\002\000\004\043\uffaf\001" +
    "\002\000\042\006\uffb4\010\uffb4\011\uffb4\012\uffb4\014\uffb4" +
    "\016\uffb4\020\uffb4\022\uffb4\024\uffb4\030\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\044\uffb4\045\uffb4\164\uffb4\001\002\000\014" +
    "\006\ufff1\010\ufff1\011\ufff1\041\ufff1\164\ufff1\001\002\000" +
    "\004\144\u0109\001\002\000\006\031\ufff0\036\ufff0\001\002" +
    "\000\006\031\uffbd\036\u010c\001\002\000\004\031\u0123\001" +
    "\002\000\014\046\247\047\251\050\252\051\246\144\uffa5" +
    "\001\002\000\004\144\u010e\001\002\000\010\032\uffc0\034" +
    "\uffc0\037\uffc0\001\002\000\010\032\u0112\034\u0110\037\uffb6" +
    "\001\002\000\014\046\247\047\251\050\252\051\246\144" +
    "\uffa5\001\002\000\004\037\u0119\001\002\000\004\144\u0113" +
    "\001\002\000\024\033\uffb9\152\uffb9\164\uffb9\175\uffb9\176" +
    "\uffb9\177\uffb9\200\uffb9\201\uffb9\202\uffb9\001\002\000\024" +
    "\033\uffe2\152\027\164\006\175\055\176\031\177\012\200" +
    "\011\201\022\202\020\001\002\000\004\033\u0116\001\002" +
    "\000\010\032\uffb8\034\uffb8\037\uffb8\001\002\000\010\032" +
    "\u0112\034\u0110\037\uffb6\001\002\000\004\037\uffb7\001\002" +
    "\000\006\031\uffbf\036\uffbf\001\002\000\006\031\uffbd\036" +
    "\u010c\001\002\000\004\031\uffbe\001\002\000\004\144\u011d" +
    "\001\002\000\024\035\uffbc\152\uffbc\164\uffbc\175\uffbc\176" +
    "\uffbc\177\uffbc\200\uffbc\201\uffbc\202\uffbc\001\002\000\024" +
    "\035\uffe2\152\027\164\006\175\055\176\031\177\012\200" +
    "\011\201\022\202\020\001\002\000\004\035\u0120\001\002" +
    "\000\010\032\uffbb\034\uffbb\037\uffbb\001\002\000\010\032" +
    "\u0112\034\u0110\037\uffb6\001\002\000\004\037\uffba\001\002" +
    "\000\042\006\uffef\010\uffef\011\uffef\012\uffef\014\uffef\016" +
    "\uffef\020\uffef\022\uffef\024\uffef\030\uffef\040\uffef\041\uffef" +
    "\042\uffef\044\uffef\045\uffef\164\uffef\001\002\000\042\006" +
    "\uffe5\010\uffe5\011\uffe5\012\304\014\276\016\271\020\303" +
    "\022\275\024\310\030\272\040\305\041\uffe5\042\274\044" +
    "\307\045\306\164\006\001\002\000\014\006\uffee\010\uffee" +
    "\011\uffee\041\uffee\164\uffee\001\002\000\004\144\u0127\001" +
    "\002\000\024\017\uffc8\152\uffc8\164\uffc8\175\uffc8\176\uffc8" +
    "\177\uffc8\200\uffc8\201\uffc8\202\uffc8\001\002\000\024\017" +
    "\uffe2\152\027\164\006\175\055\176\031\177\012\200\011" +
    "\201\022\202\020\001\002\000\004\017\u012a\001\002\000" +
    "\042\006\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7\016\uffc7" +
    "\020\uffc7\022\uffc7\024\uffc7\030\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\044\uffc7\045\uffc7\164\uffc7\001\002\000\004\002\uffff" +
    "\001\002\000\006\005\ufff4\011\ufff4\001\002\000\024\007" +
    "\uffe2\152\027\164\006\175\055\176\031\177\012\200\011" +
    "\201\022\202\020\001\002\000\024\027\ufffd\152\ufffd\164" +
    "\ufffd\175\ufffd\176\ufffd\177\ufffd\200\ufffd\201\ufffd\202\ufffd" +
    "\001\002\000\024\027\uffe2\152\027\164\006\175\055\176" +
    "\031\177\012\200\011\201\022\202\020\001\002\000\004" +
    "\027\u0131\001\002\000\004\007\u0132\001\002\000\014\005" +
    "\ufffc\006\ufffc\010\ufffc\011\ufffc\164\ufffc\001\002\000\014" +
    "\005\ufff3\006\241\010\245\011\ufff3\164\006\001\002\000" +
    "\006\005\ufffb\011\ufffb\001\002\000\004\007\u0136\001\002" +
    "\000\014\005\ufff9\006\ufff9\010\ufff9\011\ufff9\164\ufff9\001" +
    "\002\000\014\005\ufff3\006\241\010\245\011\ufff3\164\006" +
    "\001\002\000\006\005\ufff8\011\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\006\002\006\023\004\001\001\000\004\040" +
    "\237\001\001\000\002\001\001\000\020\005\016\006\032" +
    "\024\014\025\023\026\012\027\015\031\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\016\006\032\024\236\025\023\026" +
    "\012\027\015\031\020\001\001\000\002\001\001\000\004" +
    "\036\177\001\001\000\004\075\174\001\001\000\004\076" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\141\006\032\001\001\000\002\001\001\000\004" +
    "\034\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\061\006\032\013\060\025\056\030\057\033\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\016\006\032\024\045" +
    "\025\023\026\012\027\015\031\020\001\001\000\002\001" +
    "\001\000\020\005\016\006\032\024\047\025\023\026\012" +
    "\027\015\031\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\155\001\001\000\006\005\124\006\133" +
    "\001\001\000\004\013\132\001\001\000\002\001\001\000" +
    "\004\013\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\073\001\001\000\006\005" +
    "\120\006\032\001\001\000\006\005\116\006\032\001\001" +
    "\000\006\005\115\006\032\001\001\000\006\005\113\006" +
    "\032\001\001\000\006\005\111\006\032\001\001\000\006" +
    "\005\110\006\032\001\001\000\006\005\106\006\032\001" +
    "\001\000\006\005\104\006\032\001\001\000\006\005\103" +
    "\006\032\001\001\000\002\001\001\000\010\005\101\006" +
    "\032\025\102\001\001\000\006\005\076\006\032\001\001" +
    "\000\004\032\077\001\001\000\002\001\001\000\006\005" +
    "\101\006\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\105\001\001\000\002\001" +
    "\001\000\004\032\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\112\001\001\000\002\001\001\000" +
    "\004\032\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\124" +
    "\006\032\001\001\000\004\032\125\001\001\000\002\001" +
    "\001\000\004\033\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\141\006\032\001\001\000\006\005\153\006\032\001\001" +
    "\000\002\001\001\000\006\005\151\006\032\001\001\000" +
    "\006\005\147\006\032\001\001\000\006\005\145\006\032" +
    "\001\001\000\002\001\001\000\006\005\143\006\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\061\006\032\013" +
    "\060\025\056\030\157\033\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\016\006\032\024\165\025\023" +
    "\026\012\027\015\031\020\001\001\000\002\001\001\000" +
    "\004\034\167\001\001\000\016\005\061\006\032\013\060" +
    "\025\056\030\170\033\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\016\006\032\024\173\025\023" +
    "\026\012\027\015\031\020\001\001\000\002\001\001\000" +
    "\020\005\016\006\032\024\175\025\023\026\012\027\015" +
    "\031\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\242\023\241\037\243\001\001\000\004\043\u012c\001\001" +
    "\000\010\003\u012b\023\241\037\243\001\001\000\002\001" +
    "\001\000\004\045\267\001\001\000\004\010\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\266\001\001\000\002" +
    "\001\001\000\014\004\276\007\272\014\277\016\301\023" +
    "\300\001\001\000\004\010\u0125\001\001\000\004\010\u0107" +
    "\001\001\000\014\004\u0106\007\272\014\277\016\301\023" +
    "\300\001\001\000\004\010\367\001\001\000\004\010\362" +
    "\001\001\000\004\010\355\001\001\000\010\003\351\023" +
    "\241\037\243\001\001\000\004\053\347\001\001\000\014" +
    "\004\346\007\272\014\277\016\301\023\300\001\001\000" +
    "\014\004\345\007\272\014\277\016\301\023\300\001\001" +
    "\000\004\010\340\001\001\000\004\010\333\001\001\000" +
    "\004\010\325\001\001\000\004\052\323\001\001\000\004" +
    "\051\321\001\001\000\004\010\310\001\001\000\002\001" +
    "\001\000\004\061\312\001\001\000\012\005\315\006\032" +
    "\023\314\035\313\001\001\000\002\001\001\000\012\005" +
    "\315\006\032\023\314\035\317\001\001\000\012\005\315" +
    "\006\032\023\314\035\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\322\007\272" +
    "\014\277\016\301\023\300\001\001\000\002\001\001\000" +
    "\014\004\324\007\272\014\277\016\301\023\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\327\001" +
    "\001\000\016\004\331\007\272\014\277\016\301\017\330" +
    "\023\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\335\001\001" +
    "\000\012\005\315\006\032\023\314\035\336\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\342\001\001\000\012\005\315\006\032\023\314\035" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\350\007\272\014" +
    "\277\016\301\023\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\353\001\001\000\010\003\354\023" +
    "\241\037\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\357\001\001\000\012\005\315\006\032\023" +
    "\314\035\360\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\364\001\001\000\012\005" +
    "\315\006\032\023\314\035\365\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\371\001" +
    "\001\000\012\005\374\006\032\015\372\023\373\001\001" +
    "\000\002\001\001\000\012\005\374\006\032\015\u0101\023" +
    "\373\001\001\000\012\005\374\006\032\015\375\023\373" +
    "\001\001\000\002\001\001\000\004\071\377\001\001\000" +
    "\012\005\374\006\032\015\u0100\023\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\u0103\001\001\000" +
    "\012\005\374\006\032\015\u0104\023\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u0109\001\001\000\004\011\u010a\001\001" +
    "\000\002\001\001\000\004\010\u010c\001\001\000\002\001" +
    "\001\000\004\062\u010e\001\001\000\004\012\u0110\001\001" +
    "\000\004\010\u011b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\u0113\001\001\000\012\005\315\006\032" +
    "\023\314\035\u0114\001\001\000\002\001\001\000\004\067" +
    "\u0116\001\001\000\004\012\u0117\001\001\000\002\001\001" +
    "\000\004\063\u0119\001\001\000\004\011\u011a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\u011d\001\001" +
    "\000\012\005\315\006\032\023\314\035\u011e\001\001\000" +
    "\002\001\001\000\004\065\u0120\001\001\000\004\012\u0121" +
    "\001\001\000\002\001\001\000\004\050\u0123\001\001\000" +
    "\014\004\u0124\007\272\014\277\016\301\023\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\u0127\001" +
    "\001\000\012\005\315\006\032\023\314\035\u0128\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\315\006\032\023\314\035\u0134" +
    "\001\001\000\004\041\u012e\001\001\000\012\005\315\006" +
    "\032\023\314\035\u012f\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\u0132\001\001\000\010\003\u0133\023" +
    "\241\037\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\u0136\001\001\000\010\003\u0137\023\241\037" +
    "\243\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList al = new ArrayList();
    public ArrayList erroresS = new ArrayList();
    public ArrayList erroresS1 = new ArrayList();
    public ArrayList tipoDato = new ArrayList();
    public ArrayList identificador = new ArrayList();
    public ArrayList valorVariable = new ArrayList();
    static TablaSimbolos tabla = new TablaSimbolos();


    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido." );


        erroresS.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;

        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador '" +
        s.value + "' no reconocido.");
        
        erroresS1.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/

    


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    //Nodo raiz=null;
    Sintactico sin = new Sintactico();
    ArrayList corchetes = new ArrayList();
    

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // PYC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PYC",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // PYC ::= puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PYC",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ARIT ::= parA EXP OPREL parC OPLOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OPLOG ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OPLOG ::= not ARIT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OPLOG ::= or ARIT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // OPLOG ::= and ARIT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // OPREL ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OPREL ::= noIgual EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OPREL ::= igualIgual EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OPREL ::= mayorIgual EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OPREL ::= menorIgual EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OPREL ::= mayorq EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OPREL ::= menorq EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OPASIG ::= igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OPASIG ::= mulIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OPASIG ::= menosIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OPASIG ::= masIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TIPO ::= resChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TIPO ::= resDouble 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TIPO ::= resBoolean 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TIPO ::= resString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TIPO ::= resInt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DECLARACION ::= iden OPASIG CONTPRINT puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DECLARACION ::= TIPO iden OPASIG CONTPRINT puntoYcoma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CONTPRINT ::= ARIT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CONTPRINT ::= OPLOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CONTPRINT ::= ACCESOVARIABLE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(v==null){v="";}RESULT=v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CONTPRINT ::= EXP OPREL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(e==null){e="";}if(o==null){o="";};
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CONTPRINT ::= EXP mas ACCESOVARIABLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(e==null){e="";}if(m==null){m="";}if(v==null){v="";}RESULT=e+" "+v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ACCESOVARIABLE ::= resResult punto resClases punto resCant 
            {
              Object RESULT =null;
		StringBuilder sb = new StringBuilder();
                        String pathClases = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\clases.txt";
                        File c = new File(pathClases);
                        try {
                            Scanner archivoClase = new Scanner(c);
                            while (archivoClase.hasNext()) {

                                sb.append(archivoClase.nextLine());
                                sb.append("\n");
                            }
                            archivoClase.close();
                            String clases = sb.toString();
                            String[] partsClases = clases.split(",");
                            System.out.println(partsClases.length - 1);
                            RESULT=partsClases.length-1;

                        } catch (FileNotFoundException ex) {
                        }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ACCESOVARIABLE ::= resResult punto resClases punto resNom 
            {
              Object RESULT =null;
		StringBuilder sb = new StringBuilder();
                        String pathClases = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\clases.txt";
                        File c = new File(pathClases);
                        try {
                            Scanner archivoClase = new Scanner(c);
                            while (archivoClase.hasNext()) {

                                sb.append(archivoClase.nextLine());
                                sb.append("\n");
                            }
                            archivoClase.close();
                            String clases = sb.toString();
                            System.out.println(clases);
                            RESULT=clases;

                        } catch (FileNotFoundException ex) {
                        }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ACCESOVARIABLE ::= resResult punto resClases 
            {
              Object RESULT =null;
		StringBuilder sb = new StringBuilder();
                        String pathClases = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\clases.txt";
                        File c = new File(pathClases);
                        try {
                            Scanner archivoClase = new Scanner(c);
                            while (archivoClase.hasNext()) {

                                sb.append(archivoClase.nextLine());
                                sb.append("\n");
                            }
                            archivoClase.close();
                            String clases = sb.toString();
                            System.out.println(clases);
                            RESULT=clases;

                        } catch (FileNotFoundException ex) {
                        }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ACCESOVARIABLE ::= resResult punto resClases corA entero corC punto resNom 
            {
              Object RESULT =null;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		StringBuilder sb = new StringBuilder();
                        String pathClases = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\clases.txt";
                        File c = new File(pathClases);
                        try {
                            Scanner archivoClase = new Scanner(c);
                            while (archivoClase.hasNext()) {

                                sb.append(archivoClase.nextLine());
                                sb.append("\n");
                            }
                            archivoClase.close();
                            String clases = sb.toString();
                            String[] partsClases = clases.split(",");
                            for (int x = 0; x < partsClases.length - 1; x++) {
                                if (!partsClases[x].equals("") || !partsClases[x].equals(" ") && x == indice) {

                                    RESULT=partsClases[indice];
                                    System.out.println(partsClases[indice]);
                                    break;
                                }
                            }

                        } catch (FileNotFoundException ex) {
                        }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ACCESOVARIABLE ::= resResult punto resMet punto resCant 
            {
              Object RESULT =null;
		StringBuilder sb2 = new StringBuilder();
                        String pathMetodos = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\metodos.txt";
                        File c2 = new File(pathMetodos);
                        try {
                            Scanner archivoMetodos = new Scanner(c2);
                            while (archivoMetodos.hasNext()) {

                                sb2.append(archivoMetodos.nextLine());
                                sb2.append("\n");
                            }
                            archivoMetodos.close();
                            String metodos = sb2.toString();
                            String[] partsMetodos = metodos.split(",");
                            System.out.println(partsMetodos.length - 1);
                            RESULT=partsMetodos.length-1;

                        } catch (FileNotFoundException ex) {
                        }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ACCESOVARIABLE ::= resResult punto resMet punto resNom 
            {
              Object RESULT =null;
		StringBuilder sb2 = new StringBuilder();
                        String pathMetodos = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\metodos.txt";
                        File c2 = new File(pathMetodos);
                        try {
                            Scanner archivoMetodos = new Scanner(c2);
                            while (archivoMetodos.hasNext()) {

                                sb2.append(archivoMetodos.nextLine());
                                sb2.append("\n");
                            }
                            archivoMetodos.close();
                            String metodos = sb2.toString();
                            System.out.println(metodos);
                            RESULT=metodos;

                        } catch (FileNotFoundException ex) {
                        }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ACCESOVARIABLE ::= resResult punto resMet 
            {
              Object RESULT =null;
		StringBuilder sb2 = new StringBuilder();
                        String pathMetodos = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\metodos.txt";
                        File c2 = new File(pathMetodos);
                        try {
                            Scanner archivoMetodos = new Scanner(c2);
                            while (archivoMetodos.hasNext()) {

                                sb2.append(archivoMetodos.nextLine());
                                sb2.append("\n");
                            }
                            archivoMetodos.close();
                            String metodos = sb2.toString();
                            System.out.println(metodos);
                            RESULT=metodos;

                        } catch (FileNotFoundException ex) {
                        }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ACCESOVARIABLE ::= resResult punto resMet corA entero corC punto resNom 
            {
              Object RESULT =null;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		StringBuilder sb2 = new StringBuilder();
                        String pathMetodos = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\metodos.txt";
                        File c2 = new File(pathMetodos);
                        try {
                            Scanner archivoMetodos = new Scanner(c2);
                            while (archivoMetodos.hasNext()) {

                                sb2.append(archivoMetodos.nextLine());
                                sb2.append("\n");
                            }
                            archivoMetodos.close();
                            String metodos = sb2.toString();
                            String[] partsMetodos = metodos.split(",");
                            for (int x = 0; x < partsMetodos.length - 1; x++) {
                                if (!partsMetodos[x].equals("") || !partsMetodos[x].equals(" ") && x == indice) {

                                    RESULT=partsMetodos[indice];
                                    System.out.println(partsMetodos[indice]);
                                    break;
                                }
                            }

                        } catch (FileNotFoundException ex) {
                        }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ACCESOVARIABLE ::= resResult punto resVar punto resCant 
            {
              Object RESULT =null;
		StringBuilder sb0 = new StringBuilder();
                        String pathVar = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\variables.txt";
                        File c0 = new File(pathVar);
                        try {
                            Scanner archivoVar = new Scanner(c0);
                            while (archivoVar.hasNext()) {

                                sb0.append(archivoVar.nextLine());
                                sb0.append("\n");
                            }
                            archivoVar.close();
                            String variables = sb0.toString();
                            String[] partsVar = variables.split(",");
                            System.out.println(partsVar.length - 1);
                            RESULT=partsVar.length-1;

                        } catch (FileNotFoundException ex) {
                        }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ACCESOVARIABLE ::= resResult punto resVar punto resNom 
            {
              Object RESULT =null;
		StringBuilder sb0 = new StringBuilder();
                        String pathVar = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\variables.txt";
                        File c0 = new File(pathVar);
                        try {
                            Scanner archivoVar = new Scanner(c0);
                            while (archivoVar.hasNext()) {

                                sb0.append(archivoVar.nextLine());
                                sb0.append("\n");
                            }
                            archivoVar.close();
                            String variables = sb0.toString();
                            System.out.println(variables);
                            RESULT=variables;

                        } catch (FileNotFoundException ex) {
                        }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ACCESOVARIABLE ::= resResult punto resVar 
            {
              Object RESULT =null;
		StringBuilder sb0 = new StringBuilder();
                        String pathVar = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\variables.txt";
                        File c0 = new File(pathVar);
                        try {
                            Scanner archivoVar = new Scanner(c0);
                            while (archivoVar.hasNext()) {

                                sb0.append(archivoVar.nextLine());
                                sb0.append("\n");
                            }
                            archivoVar.close();
                            String variables = sb0.toString();
                            System.out.println(variables);
                            RESULT=variables;

                        } catch (FileNotFoundException ex) {
                        }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ACCESOVARIABLE ::= resResult punto resVar corA entero corC punto resNom 
            {
              Object RESULT =null;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		StringBuilder sb0 = new StringBuilder();
                        String pathVar = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\variables.txt";
                        File c0 = new File(pathVar);
                        try {
                            Scanner archivoVar = new Scanner(c0);
                            while (archivoVar.hasNext()) {

                                sb0.append(archivoVar.nextLine());
                                sb0.append("\n");
                            }
                            archivoVar.close();
                            String variables = sb0.toString();
                            String[] partsVar = variables.split(",");
                            for (int x = 0; x < partsVar.length - 1; x++) {
                                if (!partsVar[x].equals("") || !partsVar[x].equals(" ") && x == indice) {

                                    RESULT=partsVar[indice];
                                    System.out.println(partsVar[indice]);
                                    break;
                                }
                            }

                        } catch (FileNotFoundException ex) {
                        }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ACCESOVARIABLE ::= resResult punto resScore 
            {
              Object RESULT =null;
		double s=0;StringBuilder sb0 = new StringBuilder();
                        String pathScore = "C:\\Users\\pablo\\Desktop\\Compi Junio\\[Compi1]Proyecto\\score.txt";
                        File c0 = new File(pathScore);
                        try {
                            Scanner archivoScore = new Scanner(c0);
                            while (archivoScore.hasNext()) {

                                sb0.append(archivoScore.nextLine());
                                sb0.append("\n");
                            }
                            archivoScore.close();
                            String score = sb0.toString();
                            String[] partsScore = score.split(",");
                            for (int x = 0; x < partsScore.length - 1; x++) {
                                if (!partsScore[x].equals("") || !partsScore[x].equals(" ")) {

                                    s=Double.parseDouble(partsScore[x]);;
                                    System.out.println(partsScore[x]);
                                }
                            }

                        } catch (FileNotFoundException ex) {
                        }RESULT=s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FUNCPRINT ::= resPrint parA CONTPRINT parC puntoYcoma 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		if(v==null){v="";}RESULT=v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCPRINT",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CUERPOCPR ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CUERPOCPR ::= iden decre puntoYcoma CUERPOCPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CUERPOCPR ::= iden incre puntoYcoma CUERPOCPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CUERPOCPR ::= EXP NT$30 CUERPOCPR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$30 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT=v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$30",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CUERPOCPR ::= FUNCPRINT NT$29 CUERPOCPR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$29 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT=v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$29",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CUERPOCPR ::= DECLARACION CUERPOCPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CUERPOCPR ::= ACCESOVARIABLE NT$28 CUERPOCPR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$28 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT=v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$28",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CPREPORT ::= dobleDolar CUERPOCPR PYC dobleDolar 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add(v+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CPREPORT",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // FUENTE ::= ver 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FUENTE ::= tcm 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FUENTE ::= tnr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FUENTE ::= tms 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FUENTE ::= swss 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FUENTE ::= scri 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FUENTE ::= serif 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FUENTE ::= sanss 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FUENTE ::= roman 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FUENTE ::= pala 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FUENTE ::= os 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FUENTE ::= monos 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FUENTE ::= modern 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FUENTE ::= minion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FUENTE ::= impact 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FUENTE ::= helve 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FUENTE ::= georg 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FUENTE ::= garam 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FUENTE ::= frank 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FUENTE ::= fanta 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUENTE ::= deco 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUENTE ::= curs 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUENTE ::= cour 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUENTE ::= csm 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FUENTE ::= calib 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUENTE ::= bv 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUENTE ::= bl 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUENTE ::= bg 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUENTE ::= bf 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUENTE ::= arial 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUENTE ::= archi 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUENTE ::= antiq 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUENTE ::= afb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ALINEACION ::= centrado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ALINEACION ::= derecha 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ALINEACION ::= izquierda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // COLOR ::= morado 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // COLOR ::= anaranjado 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // COLOR ::= gris 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COLOR ::= verde 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COLOR ::= azul 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COLOR ::= amarillo 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COLOR ::= rojo 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ATRIBUTOS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ATRIBUTOS ::= fon igual cadena ATRIBUTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(b==null){b="";}String[] parts = a.split("\"");RESULT=" style="+'"'+"font-family:"+parts[1]+'"'+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ATRIBUTOS ::= alig igual cadena ATRIBUTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(b==null){b="";}if(a=='"'+"izquierda"+'"'){a="left";}if(a=='"'+"derecha"+'"'){a="right";}if(a=='"'+"centrado"+'"'){a="center";}
                                            String[] parts = a.split("\"");RESULT=" style="+'"'+"text-align:"+parts[1]+'"'+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ATRIBUTOS ::= txtcol igual cadena ATRIBUTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(b==null){b="";}if(a=='"'+"rojo"+'"'){a="red";}if(a=='"'+"amarillo"+'"'){a="yellow";}
                                            if(a=='"'+"azul"+'"'){a="blue";}if(a=='"'+"gris"+'"'){a="gray";}if(a=='"'+"anaranjado"+'"'){a="orange";}if(a=='"'+"morado"+'"'){a="purple";}
                                            String[] parts = a.split("\"");RESULT=" style="+'"'+"text-color:"+parts[1]+'"'+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ATRIBUTOS ::= col igual cadena ATRIBUTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(b==null){b="";}if(a=='"'+"rojo"+'"'){a="red";}if(a=='"'+"amarillo"+'"'){a="yellow";}
                                            if(a=='"'+"azul"+'"'){a="blue";}if(a=='"'+"gris"+'"'){a="gray";}if(a=='"'+"anaranjado"+'"'){a="orange";}if(a=='"'+"morado"+'"'){a="purple";}
                                            String[] parts = a.split("\"");RESULT=" style="+'"'+"color:"+parts[1]+'"'+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CUERPODIV ::= CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODIV",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EDIV ::= divA ATRIBUTOS mayorq NT$27 CUERPODIV divC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add(d+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EDIV",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$27 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(b==null){b="";}parser.al.add(a+b+c+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$27",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CUERPOP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CUERPOP ::= CPREPORT CUERPOP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CUERPOP ::= CPREPORT br NT$26 CUERPOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$26 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(a+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$26",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CUERPOP ::= EXP CUERPOP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CUERPOP ::= EXP br NT$25 CUERPOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$25 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(a+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$25",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EP ::= pA ATRIBUTOS mayorq NT$24 CUERPOP pC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add(d+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$24 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(b==null){b="";}parser.al.add(a+b+c+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$24",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ETDHA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETDHA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ETDHA ::= thA mayorq NT$22 CUERPO thC NT$23 ETDHA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETDHA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(c+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$23",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$22 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(a+b+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ETDHA ::= tdA ATRIBUTOS mayorq NT$20 CUERPO tdC NT$21 ETDHA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETDHA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(d+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$20 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(b==null){b="";}parser.al.add(a+b+c+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ETRA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETRA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ETRA ::= trA ATRIBUTOS mayorq NT$18 ETDHA trC NT$19 ETRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETRA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(d+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$18 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(b==null){b="";}parser.al.add(a+b+c+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EHA ::= h6A ATRIBUTOS mayorq NT$17 CUERPO h6C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add(d+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$17 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(b==null){b="";}parser.al.add(a+b+c+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EHA ::= h5A ATRIBUTOS mayorq NT$16 CUERPO h5C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add(d+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$16 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(b==null){b="";}parser.al.add(a+b+c+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EHA ::= h4A ATRIBUTOS mayorq NT$15 CUERPO h4C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add(d+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$15 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(b==null){b="";}parser.al.add(a+b+c+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EHA ::= h3A ATRIBUTOS mayorq NT$14 CUERPO h3C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add(d+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$14 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(b==null){b="";}parser.al.add(a+b+c+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EHA ::= h2A ATRIBUTOS mayorq NT$13 CUERPO h2C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add(d+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(b==null){b="";}parser.al.add(a+b+c+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EHA ::= h1A ATRIBUTOS mayorq NT$12 CUERPO h1C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add(d+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$12 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(b==null){b="";}parser.al.add(a+b+c+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALOR ::= caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALOR ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALOR ::= bool 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALOR ::= cadena 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VALOR ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= VALOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add(v+" ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= VALOR EXP 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(v1==null){v1="";}parser.al.add(v+" ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= iden decre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= iden incre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= parA VALOR modulo EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= parA VALOR div EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= parA VALOR mul EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= parA VALOR menos EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= parA VALOR mas EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= parA VALOR parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= EXP modulo EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= EXP mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO ::= CPREPORT CUERPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO ::= EXP CUERPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPOBODY ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPOBODY ::= CPREPORT CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPOBODY ::= EDIV CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPOBODY ::= EP NT$11 CUERPOBODY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$11 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(d);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPOBODY ::= hr NT$10 CUERPOBODY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(d);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPOBODY ::= br NT$9 CUERPOBODY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(d);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPOBODY ::= tableA ATRIBUTOS mayorq NT$7 ETRA tableC NT$8 CUERPOBODY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(d+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(b==null){b="";}parser.al.add(a+b+c+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPOBODY ::= EHA CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BODY ::= bodyA ATRIBUTOS mayorq 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(v2==null){v2="";}RESULT=v1+" "+v2+v3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPOHTML ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPOHTML ::= CPREPORT CUERPOHTML 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPOHTML ::= BODY NT$5 CUERPOBODY CUERPOHTML bodyC NT$6 CUERPOHTML 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(v2+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$5 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(v1+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPOHTML ::= headA NT$3 CUERPO headC NT$4 CUERPOHTML 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(v2+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(v1+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPOHTML ::= headA titleA NT$1 CUERPO titleC headC NT$2 CUERPOHTML 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v5 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v5 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\n"+v4+"\n"+v5+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(v1+"\n"+v2+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CPREPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= htmlA NT$0 CUERPOHTML htmlC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add(v3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add(v1+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

