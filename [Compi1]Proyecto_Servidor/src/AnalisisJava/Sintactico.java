
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 06 18:42:28 CST 2018
//----------------------------------------------------

package AnalisisJava;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 06 18:42:28 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\043\002\000\002\003\007\000\002\005\005" +
    "\000\002\005\005\000\002\005\003\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\007" +
    "\000\002\006\007\000\002\006\007\000\002\006\007\000" +
    "\002\006\007\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\033\003\000\002\033\002" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\022\006\000\002\022\007\000\002\022\007\000\002" +
    "\022\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\044\002\000\002\004\011\000\002\004\002\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\002\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\002\000\002\045\002\000\002\013\015\000\002" +
    "\046\002\000\002\036\020\000\002\014\006\000\002\015" +
    "\010\000\002\015\006\000\002\021\003\000\002\021\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\002\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\002\000\002\017\003\000" +
    "\002\017\005\000\002\017\004\000\002\017\006\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\002\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\047\002\000\002\024\013\000\002" +
    "\024\004\000\002\050\002\000\002\026\010\000\002\051" +
    "\002\000\002\027\016\000\002\052\002\000\002\027\020" +
    "\000\002\053\002\000\002\030\013\000\002\054\002\000" +
    "\002\031\015\000\002\055\002\000\002\032\020\000\002" +
    "\035\010\000\002\035\002\000\002\041\006\000\002\041" +
    "\002\000\002\034\004\000\002\034\005\000\002\034\002" +
    "\000\002\037\013\000\002\025\007\000\002\040\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\022\002\uffd2\010\013\011\010\012\014\047" +
    "\007\050\011\051\006\052\uffac\001\002\000\004\052\027" +
    "\001\002\000\004\002\026\001\002\000\026\006\uffad\007" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\046\uffad\052\uffad" +
    "\065\uffad\072\uffad\001\002\000\004\072\017\001\002\000" +
    "\026\006\uffb0\007\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\046\uffb0\052\uffb0\065\uffb0\072\uffb0\001\002\000\026\006" +
    "\uffaf\007\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\046\uffaf" +
    "\052\uffaf\065\uffaf\072\uffaf\001\002\000\004\002\000\001" +
    "\002\000\026\006\uffb1\007\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\046\uffb1\052\uffb1\065\uffb1\072\uffb1\001\002\000" +
    "\026\006\uffae\007\uffae\013\uffae\014\uffae\015\uffae\016\uffae" +
    "\046\uffae\052\uffae\065\uffae\072\uffae\001\002\000\004\002" +
    "\uffff\001\002\000\006\057\021\063\020\001\002\000\006" +
    "\057\ufffa\063\ufffa\001\002\000\006\040\025\072\017\001" +
    "\002\000\022\002\ufffe\010\ufffe\011\ufffe\012\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\001\002\000\022\002\uffd2\010" +
    "\013\011\010\012\014\047\007\050\011\051\006\052\uffac" +
    "\001\002\000\004\002\ufffd\001\002\000\006\057\ufffc\063" +
    "\ufffc\001\002\000\006\057\ufffb\063\ufffb\001\002\000\004" +
    "\002\001\001\002\000\004\072\030\001\002\000\004\061" +
    "\031\001\002\000\064\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\046\uffd4\050\uffd4\051\uffd4\053\uffd4" +
    "\062\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072" +
    "\uffd4\073\uffd4\001\002\000\064\006\uffac\007\uffac\010\060" +
    "\011\010\012\014\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\057\021\045\022\052\023\062\046\uffac\050\011\051\006" +
    "\053\056\062\uffca\065\uffac\066\063\067\035\070\034\071" +
    "\047\072\066\073\043\001\002\000\076\006\uffa1\007\uffa1" +
    "\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\u0132\021\uffa1\022\uffa1\023\uffa1\045\uffa1" +
    "\046\uffa1\050\uffa1\051\uffa1\053\uffa1\054\uffa1\055\uffa1\056" +
    "\uffa1\062\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1" +
    "\072\uffa1\073\uffa1\001\002\000\066\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\057\uffd8\060\uffd8\064\uffd8\066\uffd8\067\uffd8" +
    "\070\uffd8\071\uffd8\072\uffd8\073\uffd8\001\002\000\066\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\057\uffd9\060\uffd9\064\uffd9" +
    "\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\001" +
    "\002\000\074\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\045\uff9d\046\uff9d\050\uff9d\051\uff9d\053\uff9d" +
    "\054\uff9d\055\uff9d\056\uff9d\062\uff9d\065\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\001\002\000\064" +
    "\006\uffac\007\uffac\010\060\011\010\012\014\013\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\057\021\045\022\052\023\062" +
    "\046\uffac\050\011\051\006\053\056\062\uffca\065\uffac\066" +
    "\063\067\035\070\034\071\047\072\066\073\043\001\002" +
    "\000\064\006\uffac\007\uffac\010\060\011\010\012\014\013" +
    "\uffac\014\uffac\015\uffac\016\uffac\017\057\021\045\022\052" +
    "\023\062\046\uffac\050\011\051\006\053\056\062\uffca\065" +
    "\uffac\066\063\067\035\070\034\071\047\072\066\073\043" +
    "\001\002\000\064\006\uffac\007\uffac\010\060\011\010\012" +
    "\014\013\uffac\014\uffac\015\uffac\016\uffac\017\057\021\045" +
    "\022\052\023\062\046\uffac\050\011\051\006\053\056\062" +
    "\uffca\065\uffac\066\063\067\035\070\034\071\047\072\066" +
    "\073\043\001\002\000\024\006\102\007\101\013\076\014" +
    "\075\015\077\016\073\046\100\065\071\072\uffb2\001\002" +
    "\000\066\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\057\uffd5\060" +
    "\uffd5\064\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5" +
    "\073\uffd5\001\002\000\074\006\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\045\uff9f\046\uff9f\050\uff9f\051" +
    "\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\062\uff9f\065\uff9f" +
    "\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\001" +
    "\002\000\004\032\u011d\001\002\000\012\030\307\036\311" +
    "\037\312\040\313\001\002\000\066\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\057\uffd7\060\uffd7\064\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\071\uffd7\072\uffd7\073\uffd7\001\002\000\004\062" +
    "\u0119\001\002\000\074\006\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\056\uff9e\062\uff9e\065\uff9e\066" +
    "\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\001\002" +
    "\000\004\032\u0103\001\002\000\064\006\uffac\007\uffac\010" +
    "\060\011\010\012\014\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\057\021\045\022\052\023\062\046\uffac\050\011\051" +
    "\006\053\056\062\uffca\065\uffac\066\063\067\035\070\034" +
    "\071\047\072\066\073\043\001\002\000\064\006\uffac\007" +
    "\uffac\010\013\011\010\012\014\013\uffac\014\uffac\015\uffac" +
    "\016\uffac\017\057\021\045\022\052\023\062\046\uffac\050" +
    "\011\051\006\053\056\062\uffc4\065\uffac\066\063\067\035" +
    "\070\034\071\047\072\066\073\043\001\002\000\064\006" +
    "\uffac\007\uffac\010\060\011\010\012\014\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\057\021\045\022\052\023\062\046" +
    "\uffac\050\011\051\006\053\056\062\uffca\065\uffac\066\063" +
    "\067\035\070\034\071\047\072\066\073\043\001\002\000" +
    "\004\032\351\001\002\000\004\032\341\001\002\000\026" +
    "\006\uffb1\007\uffb1\012\324\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\046\uffb1\065\uffb1\072\uffb1\001\002\000\074\006\uffa0" +
    "\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\045\uffa0" +
    "\046\uffa0\050\uffa0\051\uffa0\053\uffa0\054\uffa0\055\uffa0\056" +
    "\uffa0\062\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0" +
    "\072\uffa0\073\uffa0\001\002\000\004\061\205\001\002\000" +
    "\066\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\057\uffda\060\uffda" +
    "\064\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073" +
    "\uffda\001\002\000\064\006\uffac\007\uffac\010\060\011\010" +
    "\012\014\013\uffac\014\uffac\015\uffac\016\uffac\017\057\021" +
    "\045\022\052\023\062\046\uffac\050\011\051\006\053\056" +
    "\062\uffca\065\uffac\066\063\067\035\070\034\071\047\072" +
    "\066\073\043\001\002\000\004\072\174\001\002\000\020" +
    "\030\uffbc\031\067\032\070\036\uffbc\037\uffbc\040\uffbc\072" +
    "\uffd6\001\002\000\004\072\172\001\002\000\042\006\102" +
    "\007\101\013\076\014\075\015\077\016\073\032\103\035" +
    "\uffa2\046\100\065\071\066\063\067\035\070\034\071\047" +
    "\072\106\073\043\001\002\000\020\032\uffb3\066\uffb3\067" +
    "\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\001\002\000\022" +
    "\031\170\032\144\035\uffab\036\137\037\141\040\143\041" +
    "\145\064\140\001\002\000\020\032\uffb5\066\uffb5\067\uffb5" +
    "\070\uffb5\071\uffb5\072\uffb5\073\uffb5\001\002\000\020\032" +
    "\103\066\063\067\035\070\034\071\047\072\106\073\043" +
    "\001\002\000\020\032\uffb6\066\uffb6\067\uffb6\070\uffb6\071" +
    "\uffb6\072\uffb6\073\uffb6\001\002\000\020\032\uffb8\066\uffb8" +
    "\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\001\002\000" +
    "\020\032\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7" +
    "\073\uffb7\001\002\000\020\032\uffb4\066\uffb4\067\uffb4\070" +
    "\uffb4\071\uffb4\072\uffb4\073\uffb4\001\002\000\020\032\uffb9" +
    "\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\001" +
    "\002\000\020\032\uffba\066\uffba\067\uffba\070\uffba\071\uffba" +
    "\072\uffba\073\uffba\001\002\000\016\066\063\067\035\070" +
    "\034\071\047\072\106\073\043\001\002\000\004\035\123" +
    "\001\002\000\026\031\uffe7\032\uffe7\033\114\034\107\035" +
    "\uffe7\036\111\037\112\040\113\041\115\064\110\001\002" +
    "\000\066\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\057\uffd6\060" +
    "\uffd6\064\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6" +
    "\073\uffd6\001\002\000\060\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\057\uffe8\064" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8" +
    "\001\002\000\042\006\102\007\101\013\076\014\075\015" +
    "\077\016\073\032\103\035\uffa2\046\100\065\071\066\063" +
    "\067\035\070\034\071\047\072\106\073\043\001\002\000" +
    "\042\006\102\007\101\013\076\014\075\015\077\016\073" +
    "\032\103\035\uffa2\046\100\065\071\066\063\067\035\070" +
    "\034\071\047\072\106\073\043\001\002\000\042\006\102" +
    "\007\101\013\076\014\075\015\077\016\073\032\103\035" +
    "\uffa2\046\100\065\071\066\063\067\035\070\034\071\047" +
    "\072\106\073\043\001\002\000\042\006\102\007\101\013" +
    "\076\014\075\015\077\016\073\032\103\035\uffa2\046\100" +
    "\065\071\066\063\067\035\070\034\071\047\072\106\073" +
    "\043\001\002\000\060\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\057\uffe9\064\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\001" +
    "\002\000\042\006\102\007\101\013\076\014\075\015\077" +
    "\016\073\032\103\035\uffa2\046\100\065\071\066\063\067" +
    "\035\070\034\071\047\072\106\073\043\001\002\000\004" +
    "\035\uffa4\001\002\000\004\035\uffa5\001\002\000\004\035" +
    "\uffa6\001\002\000\004\035\uffa7\001\002\000\004\035\uffa3" +
    "\001\002\000\004\057\124\001\002\000\074\006\uff85\007" +
    "\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85\015\uff85" +
    "\016\uff85\017\uff85\021\uff85\022\uff85\023\uff85\045\uff85\046" +
    "\uff85\050\uff85\051\uff85\053\uff85\054\uff85\055\uff85\056\uff85" +
    "\062\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072" +
    "\uff85\073\uff85\001\002\000\016\035\131\036\127\037\130" +
    "\040\132\041\133\064\126\001\002\000\020\032\103\066" +
    "\063\067\035\070\034\071\047\072\106\073\043\001\002" +
    "\000\020\032\103\066\063\067\035\070\034\071\047\072" +
    "\106\073\043\001\002\000\020\032\103\066\063\067\035" +
    "\070\034\071\047\072\106\073\043\001\002\000\060\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\057\ufff0\064\ufff0\066\ufff0\067\ufff0\070\ufff0" +
    "\071\ufff0\072\ufff0\073\ufff0\001\002\000\020\032\103\066" +
    "\063\067\035\070\034\071\047\072\106\073\043\001\002" +
    "\000\020\032\103\066\063\067\035\070\034\071\047\072" +
    "\106\073\043\001\002\000\064\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\114\034\107\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\057\uffe7\064\uffe7\066\uffe7\067\uffe7\070\uffe7\071" +
    "\uffe7\072\uffe7\073\uffe7\001\002\000\020\032\144\035\142" +
    "\036\137\037\141\040\143\041\145\064\140\001\002\000" +
    "\060\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\057\uffea\064\uffea\066\uffea\067\uffea" +
    "\070\uffea\071\uffea\072\uffea\073\uffea\001\002\000\020\032" +
    "\103\066\063\067\035\070\034\071\047\072\106\073\043" +
    "\001\002\000\020\032\103\066\063\067\035\070\034\071" +
    "\047\072\106\073\043\001\002\000\020\032\103\066\063" +
    "\067\035\070\034\071\047\072\106\073\043\001\002\000" +
    "\060\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\uffec\044\uffec\057\uffec\064\uffec\066\uffec\067\uffec" +
    "\070\uffec\071\uffec\072\uffec\073\uffec\001\002\000\020\032" +
    "\103\066\063\067\035\070\034\071\047\072\106\073\043" +
    "\001\002\000\042\006\102\007\101\013\076\014\075\015" +
    "\077\016\073\032\103\035\uffa2\046\100\065\071\066\063" +
    "\067\035\070\034\071\047\072\106\073\043\001\002\000" +
    "\020\032\103\066\063\067\035\070\034\071\047\072\106" +
    "\073\043\001\002\000\060\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\032\144\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\057\ufff2\064" +
    "\140\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2" +
    "\001\002\000\004\035\150\001\002\000\060\024\uff84\025" +
    "\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\035\uff84" +
    "\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044" +
    "\uff84\057\uff84\064\uff84\066\uff84\067\uff84\070\uff84\071\uff84" +
    "\072\uff84\073\uff84\001\002\000\060\024\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\144\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\057" +
    "\ufff3\064\140\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3" +
    "\073\ufff3\001\002\000\060\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\032\144\035\ufff4\036\ufff4\037\ufff4" +
    "\040\143\041\145\042\ufff4\043\ufff4\044\ufff4\057\ufff4\064" +
    "\140\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4" +
    "\001\002\000\060\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\144\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\057\ufff1\064\ufff1\066" +
    "\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\001\002" +
    "\000\060\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\144\035\ufff5\036\ufff5\037\ufff5\040\143\041\145" +
    "\042\ufff5\043\ufff5\044\ufff5\057\ufff5\064\140\066\ufff5\067" +
    "\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\001\002\000\020" +
    "\032\144\035\156\036\137\037\141\040\143\041\145\064" +
    "\140\001\002\000\060\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\044\uffed\057\uffed\064\uffed" +
    "\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\001" +
    "\002\000\020\032\144\035\160\036\137\037\141\040\143" +
    "\041\145\064\140\001\002\000\060\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\057" +
    "\uffee\064\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee" +
    "\073\uffee\001\002\000\020\032\144\035\162\036\137\037" +
    "\141\040\143\041\145\064\140\001\002\000\060\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\057\uffef\064\uffef\066\uffef\067\uffef\070\uffef\071" +
    "\uffef\072\uffef\073\uffef\001\002\000\020\032\144\035\164" +
    "\036\137\037\141\040\143\041\145\064\140\001\002\000" +
    "\060\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\057\uffeb\064\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\073\uffeb\001\002\000\022\031" +
    "\166\032\144\035\uffa9\036\137\037\141\040\143\041\145" +
    "\064\140\001\002\000\042\006\102\007\101\013\076\014" +
    "\075\015\077\016\073\032\103\035\uffa2\046\100\065\071" +
    "\066\063\067\035\070\034\071\047\072\106\073\043\001" +
    "\002\000\004\035\uffa8\001\002\000\042\006\102\007\101" +
    "\013\076\014\075\015\077\016\073\032\103\035\uffa2\046" +
    "\100\065\071\066\063\067\035\070\034\071\047\072\106" +
    "\073\043\001\002\000\004\035\uffaa\001\002\000\016\030" +
    "\uffbc\031\067\036\uffbc\037\uffbc\040\uffbc\057\uffbc\001\002" +
    "\000\014\030\uffbb\036\uffbb\037\uffbb\040\uffbb\057\uffbb\001" +
    "\002\000\004\030\175\001\002\000\016\066\063\067\035" +
    "\070\034\071\047\072\106\073\043\001\002\000\016\066" +
    "\063\067\035\070\034\071\047\072\106\073\043\001\002" +
    "\000\004\032\200\001\002\000\042\006\102\007\101\013" +
    "\076\014\075\015\077\016\073\032\103\035\uffa2\046\100" +
    "\065\071\066\063\067\035\070\034\071\047\072\106\073" +
    "\043\001\002\000\004\035\202\001\002\000\004\057\203" +
    "\001\002\000\074\006\uff86\007\uff86\010\uff86\011\uff86\012" +
    "\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86\021\uff86" +
    "\022\uff86\023\uff86\045\uff86\046\uff86\050\uff86\051\uff86\053" +
    "\uff86\054\uff86\055\uff86\056\uff86\062\uff86\065\uff86\066\uff86" +
    "\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86\001\002\000" +
    "\004\062\uffcc\001\002\000\070\006\uff91\007\uff91\010\uff91" +
    "\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017" +
    "\uff91\021\uff91\022\uff91\023\uff91\045\uff91\046\uff91\050\uff91" +
    "\051\uff91\053\uff91\055\uff91\062\uff91\065\uff91\066\uff91\067" +
    "\uff91\070\uff91\071\uff91\072\uff91\073\uff91\001\002\000\070" +
    "\006\uffac\007\uffac\010\013\011\010\012\014\013\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\057\021\045\022\052\023\062" +
    "\045\uffc4\046\uffac\050\011\051\006\053\056\055\uffc4\062" +
    "\uffc4\065\uffac\066\063\067\035\070\034\071\047\072\066" +
    "\073\043\001\002\000\074\006\uffac\007\uffac\010\013\011" +
    "\010\012\014\013\uffac\014\uffac\015\uffac\016\uffac\017\057" +
    "\021\045\022\052\023\062\045\uffc4\046\uffac\050\011\051" +
    "\006\053\056\054\uffc4\055\uffc4\056\uffc4\062\uffc4\065\uffac" +
    "\066\063\067\035\070\034\071\047\072\066\073\043\001" +
    "\002\000\074\006\uffac\007\uffac\010\013\011\010\012\014" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\057\021\045\022" +
    "\052\023\062\045\uffc4\046\uffac\050\011\051\006\053\056" +
    "\054\uffc4\055\uffc4\056\uffc4\062\uffc4\065\uffac\066\063\067" +
    "\035\070\034\071\047\072\066\073\043\001\002\000\024" +
    "\006\102\007\101\013\076\014\075\015\077\016\073\046" +
    "\100\065\071\072\uffb2\001\002\000\074\006\uffac\007\uffac" +
    "\010\013\011\010\012\014\013\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\057\021\045\022\052\023\062\045\uffc4\046\uffac" +
    "\050\011\051\006\053\056\054\uffc4\055\uffc4\056\uffc4\062" +
    "\uffc4\065\uffac\066\063\067\035\070\034\071\047\072\066" +
    "\073\043\001\002\000\074\006\uffac\007\uffac\010\013\011" +
    "\010\012\014\013\uffac\014\uffac\015\uffac\016\uffac\017\057" +
    "\021\045\022\052\023\062\045\uffc4\046\uffac\050\011\051" +
    "\006\053\056\054\uffc4\055\uffc4\056\uffc4\062\uffc4\065\uffac" +
    "\066\063\067\035\070\034\071\047\072\066\073\043\001" +
    "\002\000\010\045\217\055\221\062\uff87\001\002\000\074" +
    "\006\uffac\007\uffac\010\013\011\010\012\014\013\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\057\021\045\022\052\023\062" +
    "\045\uffc4\046\uffac\050\011\051\006\053\056\054\uffc4\055" +
    "\uffc4\056\uffc4\062\uffc4\065\uffac\066\063\067\035\070\034" +
    "\071\047\072\066\073\043\001\002\000\014\045\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\062\uffc6\001\002\000\020\032\103" +
    "\066\063\067\035\070\034\071\047\072\106\073\043\001" +
    "\002\000\004\062\223\001\002\000\004\057\222\001\002" +
    "\000\010\054\uff89\056\uff89\062\uff89\001\002\000\004\021" +
    "\224\001\002\000\004\032\225\001\002\000\030\032\103" +
    "\035\uffe2\042\230\043\227\044\226\066\063\067\035\070" +
    "\034\071\047\072\106\073\043\001\002\000\020\032\103" +
    "\066\063\067\035\070\034\071\047\072\106\073\043\001" +
    "\002\000\020\032\103\066\063\067\035\070\034\071\047" +
    "\072\106\073\043\001\002\000\020\032\103\066\063\067" +
    "\035\070\034\071\047\072\106\073\043\001\002\000\006" +
    "\035\uffe3\057\uffe3\001\002\000\036\024\240\025\241\026" +
    "\242\027\236\030\243\032\144\035\uffdb\036\137\037\141" +
    "\040\143\041\145\044\237\057\uffdb\064\140\001\002\000" +
    "\004\035\234\001\002\000\004\057\235\001\002\000\074" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014" +
    "\uff90\015\uff90\016\uff90\017\uff90\021\uff90\022\uff90\023\uff90" +
    "\045\uff90\046\uff90\050\uff90\051\uff90\053\uff90\054\uff90\055" +
    "\uff90\056\uff90\062\uff90\065\uff90\066\uff90\067\uff90\070\uff90" +
    "\071\uff90\072\uff90\073\uff90\001\002\000\020\032\103\066" +
    "\063\067\035\070\034\071\047\072\106\073\043\001\002" +
    "\000\004\030\271\001\002\000\020\032\103\066\063\067" +
    "\035\070\034\071\047\072\106\073\043\001\002\000\020" +
    "\032\103\066\063\067\035\070\034\071\047\072\106\073" +
    "\043\001\002\000\020\032\103\066\063\067\035\070\034" +
    "\071\047\072\106\073\043\001\002\000\004\030\244\001" +
    "\002\000\020\032\103\066\063\067\035\070\034\071\047" +
    "\072\106\073\043\001\002\000\044\032\246\035\uffe2\036" +
    "\137\037\141\040\143\041\145\042\230\043\227\044\226" +
    "\057\uffe2\064\140\066\063\067\035\070\034\071\047\072" +
    "\106\073\043\001\002\000\042\006\102\007\101\013\076" +
    "\014\075\015\077\016\073\032\103\035\uffa2\046\100\065" +
    "\071\066\063\067\035\070\034\071\047\072\106\073\043" +
    "\001\002\000\006\035\uffdd\057\uffdd\001\002\000\026\031" +
    "\uffe7\032\uffe7\033\114\034\107\035\131\036\251\037\253" +
    "\040\254\041\255\064\252\001\002\000\042\006\102\007" +
    "\101\013\076\014\075\015\077\016\073\032\103\035\uffa2" +
    "\046\100\065\071\066\063\067\035\070\034\071\047\072" +
    "\106\073\043\001\002\000\042\006\102\007\101\013\076" +
    "\014\075\015\077\016\073\032\103\035\uffa2\046\100\065" +
    "\071\066\063\067\035\070\034\071\047\072\106\073\043" +
    "\001\002\000\042\006\102\007\101\013\076\014\075\015" +
    "\077\016\073\032\103\035\uffa2\046\100\065\071\066\063" +
    "\067\035\070\034\071\047\072\106\073\043\001\002\000" +
    "\042\006\102\007\101\013\076\014\075\015\077\016\073" +
    "\032\103\035\uffa2\046\100\065\071\066\063\067\035\070" +
    "\034\071\047\072\106\073\043\001\002\000\042\006\102" +
    "\007\101\013\076\014\075\015\077\016\073\032\103\035" +
    "\uffa2\046\100\065\071\066\063\067\035\070\034\071\047" +
    "\072\106\073\043\001\002\000\022\031\170\032\144\035" +
    "\142\036\137\037\141\040\143\041\145\064\140\001\002" +
    "\000\022\031\170\032\144\035\156\036\137\037\141\040" +
    "\143\041\145\064\140\001\002\000\022\031\170\032\144" +
    "\035\160\036\137\037\141\040\143\041\145\064\140\001" +
    "\002\000\022\031\170\032\144\035\164\036\137\037\141" +
    "\040\143\041\145\064\140\001\002\000\022\031\170\032" +
    "\144\035\162\036\137\037\141\040\143\041\145\064\140" +
    "\001\002\000\044\032\246\035\uffe2\036\137\037\141\040" +
    "\143\041\145\042\230\043\227\044\226\057\uffe2\064\140" +
    "\066\063\067\035\070\034\071\047\072\106\073\043\001" +
    "\002\000\006\035\uffe1\057\uffe1\001\002\000\044\032\246" +
    "\035\uffe2\036\137\037\141\040\143\041\145\042\230\043" +
    "\227\044\226\057\uffe2\064\140\066\063\067\035\070\034" +
    "\071\047\072\106\073\043\001\002\000\006\035\uffde\057" +
    "\uffde\001\002\000\044\032\246\035\uffe2\036\137\037\141" +
    "\040\143\041\145\042\230\043\227\044\226\057\uffe2\064" +
    "\140\066\063\067\035\070\034\071\047\072\106\073\043" +
    "\001\002\000\006\035\uffe0\057\uffe0\001\002\000\020\032" +
    "\103\066\063\067\035\070\034\071\047\072\106\073\043" +
    "\001\002\000\044\032\246\035\uffe2\036\137\037\141\040" +
    "\143\041\145\042\230\043\227\044\226\057\uffe2\064\140" +
    "\066\063\067\035\070\034\071\047\072\106\073\043\001" +
    "\002\000\006\035\uffdc\057\uffdc\001\002\000\044\032\246" +
    "\035\uffe2\036\137\037\141\040\143\041\145\042\230\043" +
    "\227\044\226\057\uffe2\064\140\066\063\067\035\070\034" +
    "\071\047\072\106\073\043\001\002\000\006\035\uffdf\057" +
    "\uffdf\001\002\000\006\035\uffe6\057\uffe6\001\002\000\006" +
    "\035\uffe5\057\uffe5\001\002\000\006\035\uffe4\057\uffe4\001" +
    "\002\000\020\032\144\036\137\037\141\040\143\041\145" +
    "\057\302\064\140\001\002\000\010\054\uff88\056\uff88\062" +
    "\uff88\001\002\000\014\045\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\062\uffc5\001\002\000\014\045\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\062\uffc8\001\002\000\004\072\172\001\002\000\014" +
    "\030\307\036\311\037\312\040\313\057\310\001\002\000" +
    "\020\032\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6" +
    "\073\ufff6\001\002\000\074\006\uffbf\007\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\045\uffbf\046\uffbf\050\uffbf\051" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\062\uffbf\065\uffbf" +
    "\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\001" +
    "\002\000\004\030\321\001\002\000\004\030\320\001\002" +
    "\000\004\030\317\001\002\000\020\032\103\066\063\067" +
    "\035\070\034\071\047\072\106\073\043\001\002\000\020" +
    "\032\144\036\137\037\141\040\143\041\145\057\316\064" +
    "\140\001\002\000\106\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\032\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\062\uffbe\065\uffbe\066\uffbe\067\uffbe" +
    "\070\uffbe\071\uffbe\072\uffbe\073\uffbe\001\002\000\020\032" +
    "\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7" +
    "\001\002\000\020\032\ufff8\066\ufff8\067\ufff8\070\ufff8\071" +
    "\ufff8\072\ufff8\073\ufff8\001\002\000\020\032\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\001\002\000" +
    "\014\045\uffc7\054\uffc7\055\uffc7\056\uffc7\062\uffc7\001\002" +
    "\000\014\045\uffc9\054\uffc9\055\uffc9\056\uffc9\062\uffc9\001" +
    "\002\000\004\065\325\001\002\000\004\072\326\001\002" +
    "\000\004\032\327\001\002\000\004\007\330\001\002\000" +
    "\004\072\331\001\002\000\004\004\332\001\002\000\004" +
    "\005\333\001\002\000\004\035\334\001\002\000\004\061" +
    "\335\001\002\000\064\006\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\046\uffc1\050\uffc1\051\uffc1\053\uffc1" +
    "\062\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072" +
    "\uffc1\073\uffc1\001\002\000\064\006\uffac\007\uffac\010\013" +
    "\011\010\012\014\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\057\021\045\022\052\023\062\046\uffac\050\011\051\006" +
    "\053\056\062\uffc4\065\uffac\066\063\067\035\070\034\071" +
    "\047\072\066\073\043\001\002\000\004\062\340\001\002" +
    "\000\064\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\046\uffc0\050\uffc0\051\uffc0\053\uffc0\062\uffc0\065" +
    "\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0" +
    "\001\002\000\030\032\103\035\uffe2\042\230\043\227\044" +
    "\226\066\063\067\035\070\034\071\047\072\106\073\043" +
    "\001\002\000\004\035\343\001\002\000\004\061\344\001" +
    "\002\000\070\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\053\uff9c" +
    "\055\uff9c\062\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071" +
    "\uff9c\072\uff9c\073\uff9c\001\002\000\070\006\uffac\007\uffac" +
    "\010\013\011\010\012\014\013\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\057\021\045\022\052\023\062\045\uffc4\046\uffac" +
    "\050\011\051\006\053\056\055\uffc4\062\uffc4\065\uffac\066" +
    "\063\067\035\070\034\071\047\072\066\073\043\001\002" +
    "\000\010\045\217\055\221\062\uff87\001\002\000\004\062" +
    "\350\001\002\000\076\006\uff9b\007\uff9b\010\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\045\uff9b\046\uff9b\050\uff9b" +
    "\051\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\062\uff9b\065" +
    "\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b" +
    "\001\002\000\020\032\103\066\063\067\035\070\034\071" +
    "\047\072\106\073\043\001\002\000\020\032\144\035\353" +
    "\036\137\037\141\040\143\041\145\064\140\001\002\000" +
    "\004\061\354\001\002\000\004\054\uff8f\001\002\000\004" +
    "\054\356\001\002\000\016\066\063\067\035\070\034\071" +
    "\047\072\106\073\043\001\002\000\004\060\360\001\002" +
    "\000\074\006\uffac\007\uffac\010\013\011\010\012\014\013" +
    "\uffac\014\uffac\015\uffac\016\uffac\017\057\021\045\022\052" +
    "\023\062\045\uffc4\046\uffac\050\011\051\006\053\056\054" +
    "\uffc4\055\uffc4\056\uffc4\062\uffc4\065\uffac\066\063\067\035" +
    "\070\034\071\047\072\066\073\043\001\002\000\014\045" +
    "\217\054\uff87\055\221\056\uff87\062\uff87\001\002\000\010" +
    "\054\363\056\uff8c\062\uff8c\001\002\000\016\066\063\067" +
    "\035\070\034\071\047\072\106\073\043\001\002\000\006" +
    "\056\366\062\uff8a\001\002\000\004\062\372\001\002\000" +
    "\004\060\367\001\002\000\070\006\uffac\007\uffac\010\013" +
    "\011\010\012\014\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\057\021\045\022\052\023\062\045\uffc4\046\uffac\050\011" +
    "\051\006\053\056\055\uffc4\062\uffc4\065\uffac\066\063\067" +
    "\035\070\034\071\047\072\066\073\043\001\002\000\010" +
    "\045\217\055\221\062\uff87\001\002\000\004\062\uff8b\001" +
    "\002\000\074\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e" +
    "\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\021\uff8e\022" +
    "\uff8e\023\uff8e\045\uff8e\046\uff8e\050\uff8e\051\uff8e\053\uff8e" +
    "\054\uff8e\055\uff8e\056\uff8e\062\uff8e\065\uff8e\066\uff8e\067" +
    "\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\001\002\000\004" +
    "\060\374\001\002\000\074\006\uffac\007\uffac\010\013\011" +
    "\010\012\014\013\uffac\014\uffac\015\uffac\016\uffac\017\057" +
    "\021\045\022\052\023\062\045\uffc4\046\uffac\050\011\051" +
    "\006\053\056\054\uffc4\055\uffc4\056\uffc4\062\uffc4\065\uffac" +
    "\066\063\067\035\070\034\071\047\072\066\073\043\001" +
    "\002\000\014\045\217\054\uff87\055\221\056\uff87\062\uff87" +
    "\001\002\000\010\054\363\056\uff8c\062\uff8c\001\002\000" +
    "\006\056\uff8d\062\uff8d\001\002\000\004\062\uffcb\001\002" +
    "\000\004\062\uffd0\001\002\000\004\062\uffce\001\002\000" +
    "\036\006\uffac\007\uffac\010\013\011\010\012\014\013\uffac" +
    "\014\uffac\015\uffac\016\uffac\046\uffac\050\011\051\006\065" +
    "\uffac\072\172\001\002\000\024\006\102\007\101\013\076" +
    "\014\075\015\077\016\073\046\100\065\071\072\uffb2\001" +
    "\002\000\030\032\103\042\230\043\227\044\226\057\uffe2" +
    "\066\063\067\035\070\034\071\047\072\106\073\043\001" +
    "\002\000\004\057\u0107\001\002\000\020\032\103\066\063" +
    "\067\035\070\034\071\047\072\106\073\043\001\002\000" +
    "\022\030\u010a\032\144\035\u0109\036\137\037\141\040\143" +
    "\041\145\064\140\001\002\000\004\061\u0112\001\002\000" +
    "\042\006\102\007\101\013\076\014\075\015\077\016\073" +
    "\032\103\035\uffa2\046\100\065\071\066\063\067\035\070" +
    "\034\071\047\072\106\073\043\001\002\000\004\035\u010c" +
    "\001\002\000\004\061\u010d\001\002\000\070\006\uff95\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95" +
    "\016\uff95\017\uff95\021\uff95\022\uff95\023\uff95\045\uff95\046" +
    "\uff95\050\uff95\051\uff95\053\uff95\055\uff95\062\uff95\065\uff95" +
    "\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\001" +
    "\002\000\070\006\uffac\007\uffac\010\013\011\010\012\014" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\057\021\045\022" +
    "\052\023\062\045\uffc4\046\uffac\050\011\051\006\053\056" +
    "\055\uffc4\062\uffc4\065\uffac\066\063\067\035\070\034\071" +
    "\047\072\066\073\043\001\002\000\010\045\217\055\221" +
    "\062\uff87\001\002\000\004\062\u0111\001\002\000\074\006" +
    "\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94" +
    "\015\uff94\016\uff94\017\uff94\021\uff94\022\uff94\023\uff94\045" +
    "\uff94\046\uff94\050\uff94\051\uff94\053\uff94\054\uff94\055\uff94" +
    "\056\uff94\062\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071" +
    "\uff94\072\uff94\073\uff94\001\002\000\070\006\uff97\007\uff97" +
    "\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\uff97\021\uff97\022\uff97\023\uff97\045\uff97\046\uff97" +
    "\050\uff97\051\uff97\053\uff97\055\uff97\062\uff97\065\uff97\066" +
    "\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97\001\002" +
    "\000\070\006\uffac\007\uffac\010\013\011\010\012\014\013" +
    "\uffac\014\uffac\015\uffac\016\uffac\017\057\021\045\022\052" +
    "\023\062\045\uffc4\046\uffac\050\011\051\006\053\056\055" +
    "\uffc4\062\uffc4\065\uffac\066\063\067\035\070\034\071\047" +
    "\072\066\073\043\001\002\000\010\045\217\055\221\062" +
    "\uff87\001\002\000\004\062\u0116\001\002\000\074\006\uff96" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\021\uff96\022\uff96\023\uff96\045\uff96" +
    "\046\uff96\050\uff96\051\uff96\053\uff96\054\uff96\055\uff96\056" +
    "\uff96\062\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96" +
    "\072\uff96\073\uff96\001\002\000\004\072\172\001\002\000" +
    "\012\030\307\036\311\037\312\040\313\001\002\000\004" +
    "\002\uffd3\001\002\000\020\032\103\066\063\067\035\070" +
    "\034\071\047\072\106\073\043\001\002\000\020\032\144" +
    "\036\137\037\141\040\143\041\145\057\u011c\064\140\001" +
    "\002\000\106\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\032\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\050\uffbd\051\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\062\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd" +
    "\071\uffbd\072\uffbd\073\uffbd\001\002\000\030\032\103\035" +
    "\uffe2\042\230\043\227\044\226\066\063\067\035\070\034" +
    "\071\047\072\106\073\043\001\002\000\004\035\u011f\001" +
    "\002\000\004\061\u0120\001\002\000\070\006\uff93\007\uff93" +
    "\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016" +
    "\uff93\017\uff93\021\uff93\022\uff93\023\uff93\045\uff93\046\uff93" +
    "\050\uff93\051\uff93\053\uff93\055\uff93\062\uff93\065\uff93\066" +
    "\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93\001\002" +
    "\000\070\006\uffac\007\uffac\010\013\011\010\012\014\013" +
    "\uffac\014\uffac\015\uffac\016\uffac\017\057\021\045\022\052" +
    "\023\062\045\uffc4\046\uffac\050\011\051\006\053\056\055" +
    "\uffc4\062\uffc4\065\uffac\066\063\067\035\070\034\071\047" +
    "\072\066\073\043\001\002\000\010\045\217\055\221\062" +
    "\uff87\001\002\000\004\062\u0124\001\002\000\074\006\uff92" +
    "\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\021\uff92\022\uff92\023\uff92\045\uff92" +
    "\046\uff92\050\uff92\051\uff92\053\uff92\054\uff92\055\uff92\056" +
    "\uff92\062\uff92\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92" +
    "\072\uff92\073\uff92\001\002\000\004\072\u0126\001\002\000" +
    "\020\030\uffbc\031\067\032\u0127\036\uffbc\037\uffbc\040\uffbc" +
    "\057\uffbc\001\002\000\042\006\102\007\101\013\076\014" +
    "\075\015\077\016\073\032\103\035\uffa2\046\100\065\071" +
    "\066\063\067\035\070\034\071\047\072\106\073\043\001" +
    "\002\000\004\035\u0129\001\002\000\004\061\u012a\001\002" +
    "\000\070\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3\053\uffc3\055" +
    "\uffc3\062\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3" +
    "\072\uffc3\073\uffc3\001\002\000\070\006\uffac\007\uffac\010" +
    "\013\011\010\012\014\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\057\021\045\022\052\023\062\045\uffc4\046\uffac\050" +
    "\011\051\006\053\056\055\uffc4\062\uffc4\065\uffac\066\063" +
    "\067\035\070\034\071\047\072\066\073\043\001\002\000" +
    "\010\045\217\055\221\062\uff87\001\002\000\004\062\u012e" +
    "\001\002\000\064\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\046\uffc2\050\uffc2\051\uffc2\053\uffc2\062" +
    "\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2" +
    "\073\uffc2\001\002\000\004\062\uffcd\001\002\000\004\062" +
    "\uffd1\001\002\000\004\062\uffcf\001\002\000\004\061\u0134" +
    "\001\002\000\076\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\045\uff9a\046\uff9a\050\uff9a\051" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\062\uff9a\065\uff9a" +
    "\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\001" +
    "\002\000\070\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99" +
    "\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\021\uff99\022" +
    "\uff99\023\uff99\045\uff99\046\uff99\050\uff99\051\uff99\053\uff99" +
    "\055\uff99\062\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071" +
    "\uff99\072\uff99\073\uff99\001\002\000\070\006\uffac\007\uffac" +
    "\010\013\011\010\012\014\013\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\057\021\045\022\052\023\062\045\uffc4\046\uffac" +
    "\050\011\051\006\053\056\055\uffc4\062\uffc4\065\uffac\066" +
    "\063\067\035\070\034\071\047\072\066\073\043\001\002" +
    "\000\010\045\217\055\221\062\uff87\001\002\000\004\062" +
    "\u0138\001\002\000\076\006\uff98\007\uff98\010\uff98\011\uff98" +
    "\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020" +
    "\uff98\021\uff98\022\uff98\023\uff98\045\uff98\046\uff98\050\uff98" +
    "\051\uff98\053\uff98\054\uff98\055\uff98\056\uff98\062\uff98\065" +
    "\uff98\066\uff98\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\012\002\004\003\011\004\014\011\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\023\001\001\000\004\043\021\001\001\000\012" +
    "\002\022\003\011\004\014\011\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\031\001" +
    "\001\000\042\007\064\011\041\012\047\013\037\014\036" +
    "\015\052\016\040\021\045\024\032\025\063\027\043\030" +
    "\060\031\035\032\050\036\053\037\054\001\001\000\004" +
    "\026\u0132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\007\064\011\041\012\u0130\013\037" +
    "\014\036\015\052\016\040\021\045\024\032\025\063\027" +
    "\043\030\060\031\035\032\050\036\053\037\054\001\001" +
    "\000\042\007\064\011\041\012\u012f\013\037\014\036\015" +
    "\052\016\040\021\045\024\032\025\063\027\043\030\060" +
    "\031\035\032\050\036\053\037\054\001\001\000\042\007" +
    "\064\011\041\012\u012e\013\037\014\036\015\052\016\040" +
    "\021\045\024\032\025\063\027\043\030\060\031\035\032" +
    "\050\036\053\037\054\001\001\000\004\010\u0124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u0119\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\007\064\011" +
    "\041\012\u0101\013\037\014\036\015\052\016\040\021\045" +
    "\024\032\025\063\027\043\030\060\031\035\032\050\036" +
    "\053\037\054\001\001\000\036\007\064\011\210\014\206" +
    "\015\211\016\207\020\u0100\021\045\024\032\025\214\027" +
    "\043\030\060\031\035\032\050\037\212\001\001\000\042" +
    "\007\064\011\041\012\377\013\037\014\036\015\052\016" +
    "\040\021\045\024\032\025\063\027\043\030\060\031\035" +
    "\032\050\036\053\037\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\007\064\011\041\012" +
    "\203\013\037\014\036\015\052\016\040\021\045\024\032" +
    "\025\063\027\043\030\060\031\035\032\050\036\053\037" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\172\001\001\000\012\006\071\007\104\010\073\017" +
    "\103\001\001\000\002\001\001\000\004\040\135\001\001" +
    "\000\002\001\001\000\006\006\164\007\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\071\007\104\010" +
    "\073\017\121\001\001\000\012\006\071\007\104\010\073" +
    "\017\120\001\001\000\012\006\071\007\104\010\073\017" +
    "\117\001\001\000\012\006\071\007\104\010\073\017\116" +
    "\001\001\000\002\001\001\000\012\006\071\007\104\010" +
    "\073\017\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\162\007\133\001\001\000\006\006\160\007\133\001" +
    "\001\000\006\006\156\007\133\001\001\000\002\001\001" +
    "\000\006\006\154\007\133\001\001\000\006\006\134\007" +
    "\133\001\001\000\002\001\001\000\004\040\135\001\001" +
    "\000\002\001\001\000\006\006\153\007\133\001\001\000" +
    "\006\006\152\007\133\001\001\000\006\006\151\007\133" +
    "\001\001\000\002\001\001\000\006\006\150\007\133\001" +
    "\001\000\012\006\071\007\104\010\073\017\146\001\001" +
    "\000\006\006\145\007\133\001\001\000\004\040\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\135" +
    "\001\001\000\004\040\135\001\001\000\004\040\135\001" +
    "\001\000\004\040\135\001\001\000\004\040\135\001\001" +
    "\000\002\001\001\000\004\040\135\001\001\000\002\001" +
    "\001\000\004\040\135\001\001\000\002\001\001\000\004" +
    "\040\135\001\001\000\002\001\001\000\004\040\135\001" +
    "\001\000\012\006\071\007\104\010\073\017\166\001\001" +
    "\000\002\001\001\000\012\006\071\007\104\010\073\017" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\175\001\001\000" +
    "\004\007\176\001\001\000\002\001\001\000\012\006\071" +
    "\007\104\010\073\017\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\205\001\001\000\036\007\064\011\210\014\206\015" +
    "\211\016\207\020\213\021\045\024\032\025\214\027\043" +
    "\030\060\031\035\032\050\037\212\001\001\000\036\007" +
    "\064\011\210\014\206\015\211\016\207\020\322\021\045" +
    "\024\032\025\214\027\043\030\060\031\035\032\050\037" +
    "\212\001\001\000\036\007\064\011\210\014\206\015\211" +
    "\016\207\020\321\021\045\024\032\025\214\027\043\030" +
    "\060\031\035\032\050\037\212\001\001\000\004\010\304" +
    "\001\001\000\036\007\064\011\210\014\206\015\211\016" +
    "\207\020\303\021\045\024\032\025\214\027\043\030\060" +
    "\031\035\032\050\037\212\001\001\000\036\007\064\011" +
    "\210\014\206\015\211\016\207\020\302\021\045\024\032" +
    "\025\214\027\043\030\060\031\035\032\050\037\212\001" +
    "\001\000\004\034\217\001\001\000\036\007\064\011\210" +
    "\014\206\015\211\016\207\020\215\021\045\024\032\025" +
    "\214\027\043\030\060\031\035\032\050\037\212\001\001" +
    "\000\002\001\001\000\006\006\300\007\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\231\007\133\022" +
    "\230\033\232\001\001\000\010\006\231\007\133\022\277" +
    "\001\001\000\010\006\231\007\133\022\276\001\001\000" +
    "\010\006\231\007\133\022\275\001\001\000\002\001\001" +
    "\000\004\040\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\273\007\133\001\001" +
    "\000\002\001\001\000\006\006\266\007\133\001\001\000" +
    "\006\006\264\007\133\001\001\000\006\006\262\007\133" +
    "\001\001\000\002\001\001\000\006\006\244\007\133\001" +
    "\001\000\014\006\231\007\133\022\230\033\246\040\135" +
    "\001\001\000\012\006\071\007\247\010\073\017\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\261" +
    "\007\104\010\073\017\120\001\001\000\012\006\260\007" +
    "\104\010\073\017\121\001\001\000\012\006\257\007\104" +
    "\010\073\017\117\001\001\000\012\006\256\007\104\010" +
    "\073\017\116\001\001\000\012\006\255\007\104\010\073" +
    "\017\115\001\001\000\004\040\135\001\001\000\004\040" +
    "\135\001\001\000\004\040\135\001\001\000\004\040\135" +
    "\001\001\000\004\040\135\001\001\000\014\006\231\007" +
    "\133\022\230\033\263\040\135\001\001\000\002\001\001" +
    "\000\014\006\231\007\133\022\230\033\265\040\135\001" +
    "\001\000\002\001\001\000\014\006\231\007\133\022\230" +
    "\033\267\040\135\001\001\000\002\001\001\000\006\006" +
    "\271\007\133\001\001\000\014\006\231\007\133\022\230" +
    "\033\272\040\135\001\001\000\002\001\001\000\014\006" +
    "\231\007\133\022\230\033\274\040\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\305\001\001\000" +
    "\004\023\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\314\007\133\001\001\000\004\040\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\335\001" +
    "\001\000\036\007\064\011\210\014\206\015\211\016\207" +
    "\020\336\021\045\024\032\025\214\027\043\030\060\031" +
    "\035\032\050\037\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\231\007\133\022\230\033\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\344" +
    "\001\001\000\036\007\064\011\210\014\206\015\211\016" +
    "\207\020\345\021\045\024\032\025\214\027\043\030\060" +
    "\031\035\032\050\037\212\001\001\000\004\034\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\351" +
    "\007\133\001\001\000\004\040\135\001\001\000\002\001" +
    "\001\000\004\055\354\001\001\000\002\001\001\000\004" +
    "\007\356\001\001\000\002\001\001\000\036\007\064\011" +
    "\210\014\206\015\211\016\207\020\360\021\045\024\032" +
    "\025\214\027\043\030\060\031\035\032\050\037\212\001" +
    "\001\000\004\034\361\001\001\000\004\035\363\001\001" +
    "\000\004\007\372\001\001\000\004\041\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\007\064\011\210" +
    "\014\206\015\211\016\207\020\367\021\045\024\032\025" +
    "\214\027\043\030\060\031\035\032\050\037\212\001\001" +
    "\000\004\034\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\007\064\011\210\014\206" +
    "\015\211\016\207\020\374\021\045\024\032\025\214\027" +
    "\043\030\060\031\035\032\050\037\212\001\001\000\004" +
    "\034\375\001\001\000\004\035\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\u0103\015\u0104\021\045\001\001\000\004\010" +
    "\u0116\001\001\000\012\006\231\007\133\022\230\033\u0105" +
    "\001\001\000\002\001\001\000\006\006\u0107\007\133\001" +
    "\001\000\004\040\135\001\001\000\002\001\001\000\012" +
    "\006\071\007\104\010\073\017\u010a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\u010d\001\001\000\036" +
    "\007\064\011\210\014\206\015\211\016\207\020\u010e\021" +
    "\045\024\032\025\214\027\043\030\060\031\035\032\050" +
    "\037\212\001\001\000\004\034\u010f\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u0112\001\001\000\036" +
    "\007\064\011\210\014\206\015\211\016\207\020\u0113\021" +
    "\045\024\032\025\214\027\043\030\060\031\035\032\050" +
    "\037\212\001\001\000\004\034\u0114\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\u0117\001\001\000\004" +
    "\023\313\001\001\000\002\001\001\000\006\006\u011a\007" +
    "\133\001\001\000\004\040\135\001\001\000\002\001\001" +
    "\000\012\006\231\007\133\022\230\033\u011d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\u0120\001\001" +
    "\000\036\007\064\011\210\014\206\015\211\016\207\020" +
    "\u0121\021\045\024\032\025\214\027\043\030\060\031\035" +
    "\032\050\037\212\001\001\000\004\034\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\305\001\001" +
    "\000\002\001\001\000\012\006\071\007\104\010\073\017" +
    "\u0127\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\u012a\001\001\000\036\007\064\011\210\014\206\015" +
    "\211\016\207\020\u012b\021\045\024\032\025\214\027\043" +
    "\030\060\031\035\032\050\037\212\001\001\000\004\034" +
    "\u012c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u0134\001\001\000\036" +
    "\007\064\011\210\014\206\015\211\016\207\020\u0135\021" +
    "\045\024\032\025\214\027\043\030\060\031\035\032\050" +
    "\037\212\001\001\000\004\034\u0136\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static ArrayList al = new ArrayList();
    public ArrayList erroresS = new ArrayList();
    public ArrayList erroresS1 = new ArrayList();
    public String SCORE = " ";
    public String CLASES = " ";
    public String VARIABLES = " ";
    public String METODOS = " ";
    public static String COMENTARIOS = " ";
    
    public double score = 0;
    public String clases = " ";
    public String variables = " ";
    public String metodos = " ";
    public String comentarios = " ";
    public String json1 = '"'+"score"+'"'+":[" + score + "],";
    public String json2 = '"'+"Clases"+'"'+":[" + clases + "],";
    public String json3 = '"'+"Variables"+'"'+":[" + variables + "],";
    public String json4 = '"'+"Metodos"+'"'+":[" + metodos + "],";
    public String json5 = '"'+"Comentarios"+'"'+":[" + comentarios + "]";
    public String json = "{" + json1 + json2 + json3 + json4 + json5 + "}";

    public int f = 0;
    public int p = 0;


    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido." );


        erroresS.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;

        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador '" +
        s.value + "' no reconocido.");
        
        erroresS1.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/

    


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    //Nodo raiz=null;
    Sintactico sin = new Sintactico();
    ArrayList corchetes = new ArrayList();
    

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LLAM2 ::= parentesisA PARAM parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAM2",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LLAM ::= iden parentesisA PARAM parentesisC puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("llamada de funcion\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAM",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INSTANCIA ::= VALOR iden igual VALOR VALOR parentesisA PARAM parentesisC puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("instancia\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SALIDA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIDA",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SALIDA ::= resReturn EXP puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("return\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIDA",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SALIDA ::= resBreak puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("break\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIDA",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DEFAULT ::= resDefault dosPuntos COD2 SALIDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CASES ::= resCase VALOR dosPuntos COD2 SALIDA CASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTSWITCH ::= resSwitch parentesisA EXP parentesisC parA NT$10 resCase VALOR dosPuntos COD2 SALIDA CASES DEFAULT parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		parser.al.add("fin de la sentencia switch\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTSWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$10 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia switch\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTDO ::= resDo parA NT$9 COD2 SALIDA parC resWhile parentesisA EXPSENT parentesisC puntoYcoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		parser.al.add("fin de la sentencia Do\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTDO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$9 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia Do\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTWHILE ::= resWhile parentesisA EXPSENT parentesisC parA NT$8 COD2 SALIDA parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add("fin de la sentencia while\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTWHILE",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$8 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia while\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTFOR ::= resFor parentesisA ASIGNACION EXPSENT puntoYcoma EXP igual PARAM parentesisC parA NT$7 COD2 SALIDA parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add("fin de la sentencia for\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTFOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$7 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia for\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTFOR ::= resFor parentesisA ASIGNACION EXPSENT puntoYcoma EXP parentesisC parA NT$6 COD2 SALIDA parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add("fin de la sentencia for\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTFOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$6 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia for\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTELSE ::= resElse parA NT$5 COD2 SALIDA parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add("fin de la sentencia else\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTELSE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$5 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia else\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTIF ::= SENTIF SENTELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTIF",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTIF ::= resIf parentesisA EXPSENT parentesisC parA NT$4 COD2 SALIDA parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add("fin de la sentencia if\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTIF",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$4 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia if\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIAS ::= SENTDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIAS ::= SENTSWITCH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIAS ::= SENTFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIAS ::= SENTWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIAS ::= SENTIF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAM ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAM ::= VALOR modulo PARAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAM ::= VALOR div PARAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAM ::= VALOR mul PARAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAM ::= VALOR menos PARAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAM ::= VALOR mas PARAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAM ::= TIPO EXP coma PARAM 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=nomb;
                    if(parser.variables==" "){
                        parser.variables += "{"+'"'+"Nombre"+'"'+":"+'"'+nomb+'"'+","+'"'+"Tipo"+'"'+":"+'"'+tipo+'"'+"}";
                        parser.json3 = '"'+"Variables"+'"'+":[" + parser.variables + "],";
                        parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                        parser.VARIABLES += nomb + ",";
                    }else{
                        parser.variables += ",{"+'"'+"Nombre"+'"'+":"+'"'+nomb+'"'+","+'"'+"Tipo"+'"'+":"+'"'+tipo+'"'+"}";
                        parser.json3 = '"'+"Variables"+'"'+":[" + parser.variables + "],";
                        parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                        parser.VARIABLES += nomb + ",";
                    };
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAM ::= TIPO EXP 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=nomb;
                    if(parser.variables==" "){
                        parser.variables += "{"+'"'+"Nombre"+'"'+":"+'"'+nomb+'"'+","+'"'+"Tipo"+'"'+":"+'"'+tipo+'"'+"}";
                        parser.json3 = '"'+"Variables"+'"'+":[" + parser.variables + "],";
                        parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                        parser.VARIABLES += nomb + ",";
                    }else{
                        parser.variables += ",{"+'"'+"Nombre"+'"'+":"+'"'+nomb+'"'+","+'"'+"Tipo"+'"'+":"+'"'+tipo+'"'+"}";
                        parser.json3 = '"'+"Variables"+'"'+":[" + parser.variables + "],";
                        parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                        parser.VARIABLES += nomb + ",";
                    };
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAM ::= EXP coma PARAM 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+","+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAM ::= EXP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ACCESO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ACCESO ::= resFinal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ACCESO ::= resStatic 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ACCESO ::= resProtected 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ACCESO ::= resPrivate 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ACCESO ::= resPublic 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO ::= resVoid 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPO ::= resObject 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPO ::= resLong 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO ::= resChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPO ::= resDouble 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPO ::= resBoolean 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPO ::= resString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPO ::= resInt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTAID ::= iden coma LISTAID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id+","+id1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTAID ::= iden 
            {
              Object RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACION ::= LISTAID IGUALACION EXP puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("asignacion a variables previamente declaradas\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNACION ::= ACCESO TIPO LISTAID IGUALACION EXP puntoYcoma 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add("asignacion a variables no declaradas\n");
                    if(parser.variables==" "){
                        parser.variables += "{"+'"'+"Nombre"+'"'+":"+'"'+nomb+'"'+","+'"'+"Tipo"+'"'+":"+'"'+tipo+'"'+"}";
                        parser.json3 = '"'+"Variables"+'"'+":[" + parser.variables + "],";
                        parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                        parser.VARIABLES += nomb + ",";
                    }else{
                        parser.variables += ",{"+'"'+"Nombre"+'"'+":"+'"'+nomb+'"'+","+'"'+"Tipo"+'"'+":"+'"'+tipo+'"'+"}";
                        parser.json3 = '"'+"Variables"+'"'+":[" + parser.variables + "],";
                        parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                        parser.VARIABLES += nomb + ",";
                    };
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= ACCESO TIPO LISTAID puntoYcoma 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.al.add("declaracion de variables\n");
                    if(parser.variables==" "){
                        parser.variables += "{"+'"'+"Nombre"+'"'+":"+'"'+nomb+'"'+","+'"'+"Tipo"+'"'+":"+'"'+tipo+'"'+"}";
                        parser.json3 = '"'+"Variables"+'"'+":[" + parser.variables + "],";
                        parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                        parser.VARIABLES += nomb + ",";
                    }else{
                        parser.variables += ",{"+'"'+"Nombre"+'"'+":"+'"'+nomb+'"'+","+'"'+"Tipo"+'"'+":"+'"'+tipo+'"'+"}";
                        parser.json3 = '"'+"Variables"+'"'+":[" + parser.variables + "],";
                        parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                        parser.VARIABLES += nomb + ",";
                    };
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MAIN ::= resPublic resStatic resVoid iden parentesisA resString iden corA corC parentesisC parA NT$3 COD2 parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("fin del metodo main\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$3 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio del metodo main\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MET ::= ACCESO TIPO iden parentesisA PARAM parentesisC parA NT$2 COD2 SALIDA parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		parser.al.add("fin del metodo o funcion\n");
        if(parser.metodos==" "){
            if(num==null){
                parser.metodos += "{"+'"'+"Nombre"+'"'+":"+'"'+nomb+'"'+","+'"'+"Tipo"+'"'+":"+'"'+tipo+'"'+","+'"'+"Parametros"+'"'+":"+'"'+0+'"'+"}";
                parser.json4 = '"'+"Metodos"+'"'+":[" + parser.metodos + "],";
                parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                parser.METODOS += nomb + ",";
            }else{
                parser.metodos += "{"+'"'+"Nombre"+'"'+":"+'"'+nomb+'"'+","+'"'+"Tipo"+'"'+":"+'"'+tipo+'"'+","+'"'+"Parametros"+'"'+":"+'"'+1+'"'+"}";
                parser.json4 = '"'+"Metodos"+'"'+":[" + parser.metodos + "],";
                parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                parser.METODOS += nomb + ",";           
            }
        }else{
            if(num==null){
                parser.metodos += ",{"+'"'+"Nombre"+'"'+":"+'"'+nomb+'"'+","+'"'+"Tipo"+'"'+":"+'"'+tipo+'"'+","+'"'+"Parametros"+'"'+":"+'"'+0+'"'+"}";
                parser.json4 = '"'+"Metodos"+'"'+":[" + parser.metodos + "],";
                parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                parser.METODOS += nomb + ",";
            }else{
                parser.metodos += ",{"+'"'+"Nombre"+'"'+":"+'"'+nomb+'"'+","+'"'+"Tipo"+'"'+":"+'"'+tipo+'"'+","+'"'+"Parametros"+'"'+":"+'"'+1+'"'+"}";
                parser.json4 = '"'+"Metodos"+'"'+":[" + parser.metodos + "],";
                parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                parser.METODOS += nomb + ",";           
            }
        };
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$2 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
parser.al.add("inicio del metodo o funcion\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COD2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COD2 ::= INSTANCIA COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COD2 ::= LLAM COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COD2 ::= SENTENCIAS COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COD2 ::= ASIGNACION COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COD2 ::= DECLARACION COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COD ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COD ::= INSTANCIA COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COD ::= LLAM COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COD ::= SENTENCIAS COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COD ::= ASIGNACION COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COD ::= DECLARACION COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COD ::= MAIN COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COD ::= MET COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CLASS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CLASS ::= ACCESO resClass iden parA NT$1 COD parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		parser.al.add("fin de la clase\n");String nomb = parser.COMENTARIOS;
                        if(parser.comentarios==" "){
                            parser.comentarios += "{"+'"'+"texto"+'"'+":"+'"'+nomb+'"'+"}";
                            parser.json5 = '"'+"Comentarios"+'"'+":[" + parser.comentarios + "]";
                            parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                            parser.COMENTARIOS += nomb + ",";
                        }else{
                            parser.comentarios += ",{"+'"'+"texto"+'"'+":"+'"'+nomb+'"'+"}";
                            parser.json5 = '"'+"Comentarios"+'"'+":[" + parser.comentarios + "]";
                            parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                            parser.COMENTARIOS += nomb + ",";
                        }
                    String[] partCo = parser.COMENTARIOS.split(",");
                    String[] partCl = parser.CLASES.split(",");
                    String[] partMe = parser.METODOS.split(",");
                    String[] partVa = parser.VARIABLES.split(",");
                    parser.score = (double) (((partCo.length+1)*0.25)/((partCo.length+1)*2) + ((partVa.length+1)*0.25)/((partCo.length+1)*2) + ((partMe.length+1)*0.25)/((partCo.length+1)*2) + ((partCl.length+1)*0.25)/((partCo.length+1)*2));
                    parser.json1 = '"'+"Score"+'"'+":[" + parser.score + "]";
                    parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                    parser.SCORE += parser.score + ",";
                    File fileName0 = new File("score.txt");
                    try {
                        BufferedWriter outFile = new BufferedWriter(new FileWriter(fileName0));
                        outFile.write(parser.SCORE);
                        outFile.close();
                    } catch (IOException ex) {
                    }
                    File fileName = new File("clases.txt");
                    try {
                        BufferedWriter outFile = new BufferedWriter(new FileWriter(fileName));
                        outFile.write(parser.CLASES);
                        outFile.close();
                    } catch (IOException ex) {
                    }
                    File fileName2 = new File("metodos.txt");
                    try {
                        BufferedWriter outFile = new BufferedWriter(new FileWriter(fileName2));
                        outFile.write(parser.METODOS);
                        outFile.close();
                    } catch (IOException ex) {
                    }
                    File fileName3 = new File("variables.txt");
                    try {
                        BufferedWriter outFile = new BufferedWriter(new FileWriter(fileName3));
                        outFile.write(parser.VARIABLES);
                        outFile.close();
                    } catch (IOException ex) {
                    }
                    File fileName4 = new File("comentarios.txt");
                    try {
                        BufferedWriter outFile = new BufferedWriter(new FileWriter(fileName4));
                        outFile.write(parser.COMENTARIOS);
                        outFile.close();
                    } catch (IOException ex) {
                    }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$1 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
parser.al.add("inicio de la clase\n");
                                        parser.clases+="{"+'"'+"Nombre"+'"'+":"+'"'+val+'"'+"}";
                                        parser.json2 = '"'+"Clases"+'"'+":[" + parser.clases + "],";
                                        parser.json = "{" + parser.json1 + parser.json2 + parser.json3 + parser.json4 + parser.json5 + "}";
                                        parser.CLASES += val + ",";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALOR ::= caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALOR ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALOR ::= bool 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOR ::= cadena 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPREL ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPREL ::= EXP not igual EXP EXPSENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPREL ::= EXP igual igual EXP EXPSENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPREL ::= EXP menorIgual EXP EXPSENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPREL ::= EXP mayorIgual EXP EXPSENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPREL ::= EXP menorq EXP EXPSENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPREL ::= EXP mayorq EXP EXPSENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPSENT ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPSENT ::= OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPSENT ::= not OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPSENT ::= or OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPSENT ::= and OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= VALOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= VALOR decre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= VALOR incre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= EXP LLAM2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= parentesisA VALOR modulo EXP parentesisC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= parentesisA VALOR div EXP parentesisC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= parentesisA VALOR mul EXP parentesisC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= parentesisA VALOR menos EXP parentesisC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= parentesisA VALOR mas EXP parentesisC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= parentesisA VALOR parentesisC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= EXP modulo EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= EXP mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IGUALACION ::= igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IGUALACION ::= mul igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IGUALACION ::= menos igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IGUALACION ::= mas igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPIMP ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPIMP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPIMP ::= EXPIMP punto mul 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=val1+".*";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPIMP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPIMP ::= EXPIMP punto EXPIMP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"."+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPIMP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORT ::= resImport EXPIMP puntoYcoma NT$0 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
parser.al.add("importacion\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CLASS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

