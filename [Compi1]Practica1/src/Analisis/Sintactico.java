
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 13 08:06:21 CST 2018
//----------------------------------------------------

package Analisis;

import Analizador.Interfaz;
import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 13 08:06:21 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\044\002\000\002\003\007\000\002\005\005" +
    "\000\002\005\005\000\002\005\003\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\007" +
    "\000\002\006\007\000\002\006\007\000\002\006\007\000" +
    "\002\006\007\000\002\006\006\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\033\003\000\002\033\002" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\022\006\000\002\022\006\000\002\022\006\000\002" +
    "\022\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\045\002\000\002\004\011\000\002\004\002\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\002" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\020\002\000\002\046" +
    "\002\000\002\013\015\000\002\047\002\000\002\013\015" +
    "\000\002\050\002\000\002\036\020\000\002\014\006\000" +
    "\002\015\010\000\002\015\006\000\002\021\003\000\002" +
    "\021\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\002\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\002\000\002\017\003\000\002\017\005\000\002\017" +
    "\004\000\002\017\006\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\002\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\042\013\000\002\051\002\000\002\024\013" +
    "\000\002\024\004\000\002\052\002\000\002\026\010\000" +
    "\002\053\002\000\002\027\022\000\002\054\002\000\002" +
    "\027\024\000\002\055\002\000\002\030\013\000\002\056" +
    "\002\000\002\031\015\000\002\057\002\000\002\060\002" +
    "\000\002\032\021\000\002\061\002\000\002\035\011\000" +
    "\002\035\002\000\002\062\002\000\002\041\007\000\002" +
    "\041\002\000\002\034\005\000\002\034\004\000\002\034" +
    "\002\000\002\043\004\000\002\043\004\000\002\037\013" +
    "\000\002\025\007\000\002\040\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\020\002\uffd2\004\006\005\007\006\012\007" +
    "\010\010\uffa7\033\013\001\002\000\004\010\026\001\002" +
    "\000\004\002\025\001\002\000\004\073\016\001\002\000" +
    "\024\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\032\uffaa\073\uffaa\001\002\000\024\010\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\032\uffa9" +
    "\073\uffa9\001\002\000\004\002\000\001\002\000\024\010" +
    "\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab" +
    "\032\uffab\073\uffab\001\002\000\024\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\032\uffa8\073\uffa8" +
    "\001\002\000\004\002\uffff\001\002\000\006\051\020\061" +
    "\017\001\002\000\006\051\ufffa\061\ufffa\001\002\000\006" +
    "\036\024\073\016\001\002\000\020\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\033\ufffe\001\002\000\020" +
    "\002\uffd2\004\006\005\007\006\012\007\010\010\uffa7\033" +
    "\013\001\002\000\004\002\ufffd\001\002\000\006\051\ufffc" +
    "\061\ufffc\001\002\000\006\051\ufffb\061\ufffb\001\002\000" +
    "\004\002\001\001\002\000\004\073\027\001\002\000\004" +
    "\057\030\001\002\000\062\003\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\032\uffd4\033" +
    "\uffd4\060\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4" +
    "\074\uffd4\001\002\000\062\003\062\005\007\006\060\007" +
    "\010\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\017\057\021\052\022\044\023\063\024\056\032\uffa7\033" +
    "\013\060\uffc8\067\064\070\034\071\033\072\047\073\067" +
    "\074\043\001\002\000\076\003\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\u0143\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\060\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074" +
    "\uff9c\001\002\000\072\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070" +
    "\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\001\002\000\072" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\054\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9" +
    "\073\uffd9\074\uffd9\001\002\000\074\003\uff98\005\uff98\006" +
    "\uff98\007\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98" +
    "\016\uff98\017\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98" +
    "\060\uff98\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074" +
    "\uff98\001\002\000\062\003\062\005\007\006\060\007\010" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\057\021\052\022\044\023\063\024\056\032\uffa7\033\013" +
    "\060\uffc8\067\064\070\034\071\033\072\047\073\067\074" +
    "\043\001\002\000\062\003\062\005\007\006\060\007\010" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\057\021\052\022\044\023\063\024\056\032\uffa7\033\013" +
    "\060\uffc8\067\064\070\034\071\033\072\047\073\067\074" +
    "\043\001\002\000\062\003\062\005\007\006\060\007\010" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\057\021\052\022\044\023\063\024\056\032\uffa7\033\013" +
    "\060\uffc8\067\064\070\034\071\033\072\047\073\067\074" +
    "\043\001\002\000\022\011\103\012\077\013\104\014\076" +
    "\015\100\016\102\032\u012c\073\uffac\001\002\000\074\003" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\011\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\021\uff9a\022\uff9a\023" +
    "\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\033\uff9a\060\uff9a\067\uff9a\070\uff9a\071\uff9a\072" +
    "\uff9a\073\uff9a\074\uff9a\001\002\000\072\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\001\002\000\004\053\u0124\001\002\000\074\003\uff97\005" +
    "\uff97\006\uff97\007\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\021\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97" +
    "\033\uff97\060\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073" +
    "\uff97\074\uff97\001\002\000\012\034\312\035\313\036\314" +
    "\045\310\001\002\000\072\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\001\002\000" +
    "\004\060\u0120\001\002\000\074\003\uff99\005\uff99\006\uff99" +
    "\007\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016" +
    "\uff99\017\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\060" +
    "\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99" +
    "\001\002\000\004\053\u0109\001\002\000\062\003\062\005" +
    "\007\006\060\007\010\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\057\021\052\022\044\023\063\024" +
    "\056\032\uffa7\033\013\060\uffc8\067\064\070\034\071\033" +
    "\072\047\073\067\074\043\001\002\000\062\003\062\005" +
    "\007\006\060\007\010\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\057\021\052\022\044\023\063\024" +
    "\056\032\uffa7\033\013\060\uffc8\067\064\070\034\071\033" +
    "\072\047\073\067\074\043\001\002\000\062\003\062\005" +
    "\007\006\060\007\010\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\057\021\052\022\044\023\063\024" +
    "\056\032\uffa7\033\013\060\uffc8\067\064\070\034\071\033" +
    "\072\047\073\067\074\043\001\002\000\004\053\354\001" +
    "\002\000\004\053\344\001\002\000\024\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\016\uffab\032\uffab\033\327\073" +
    "\uffab\001\002\000\074\003\uff9b\005\uff9b\006\uff9b\007\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\060\uff9b\067" +
    "\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\001\002" +
    "\000\006\051\326\060\325\001\002\000\004\057\214\001" +
    "\002\000\072\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\062\uffda" +
    "\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\071" +
    "\uffda\072\uffda\073\uffda\074\uffda\001\002\000\062\003\062" +
    "\005\007\006\060\007\010\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\057\021\052\022\044\023\063" +
    "\024\056\032\uffa7\033\013\060\uffc8\067\064\070\034\071" +
    "\033\072\047\073\067\074\043\001\002\000\004\073\203" +
    "\001\002\000\022\034\uffb5\035\uffb5\036\uffb5\045\uffb5\050" +
    "\071\053\072\061\070\073\uffd6\001\002\000\004\073\174" +
    "\001\002\000\004\073\172\001\002\000\040\011\103\012" +
    "\077\013\104\014\076\015\100\016\102\032\073\053\101" +
    "\054\uff9d\067\064\070\034\071\033\072\047\073\107\074" +
    "\043\001\002\000\020\053\uffad\067\uffad\070\uffad\071\uffad" +
    "\072\uffad\073\uffad\074\uffad\001\002\000\020\034\142\035" +
    "\144\036\146\037\147\040\143\050\170\054\uffa6\001\002" +
    "\000\020\053\101\067\064\070\034\071\033\072\047\073" +
    "\107\074\043\001\002\000\020\053\uffaf\067\uffaf\070\uffaf" +
    "\071\uffaf\072\uffaf\073\uffaf\074\uffaf\001\002\000\020\053" +
    "\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1" +
    "\001\002\000\020\053\uffb0\067\uffb0\070\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\074\uffb0\001\002\000\016\067\064\070\034" +
    "\071\033\072\047\073\107\074\043\001\002\000\020\053" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\001\002\000\020\053\uffb3\067\uffb3\070\uffb3\071\uffb3\072" +
    "\uffb3\073\uffb3\074\uffb3\001\002\000\020\053\uffb2\067\uffb2" +
    "\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\001\002\000" +
    "\004\054\127\001\002\000\026\034\110\035\113\036\115" +
    "\037\117\040\111\050\uffe7\053\116\054\uffe7\062\114\063" +
    "\112\001\002\000\072\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070" +
    "\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\001\002\000\040" +
    "\011\103\012\077\013\104\014\076\015\100\016\102\032" +
    "\073\053\101\054\uff9d\067\064\070\034\071\033\072\047" +
    "\073\107\074\043\001\002\000\040\011\103\012\077\013" +
    "\104\014\076\015\100\016\102\032\073\053\101\054\uff9d" +
    "\067\064\070\034\071\033\072\047\073\107\074\043\001" +
    "\002\000\064\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\053\uffe8\054\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074" +
    "\uffe8\001\002\000\040\011\103\012\077\013\104\014\076" +
    "\015\100\016\102\032\073\053\101\054\uff9d\067\064\070" +
    "\034\071\033\072\047\073\107\074\043\001\002\000\064" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\053\uffe9\054\uffe9\064\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\001\002" +
    "\000\040\011\103\012\077\013\104\014\076\015\100\016" +
    "\102\032\073\053\101\054\uff9d\067\064\070\034\071\033" +
    "\072\047\073\107\074\043\001\002\000\040\011\103\012" +
    "\077\013\104\014\076\015\100\016\102\032\073\053\101" +
    "\054\uff9d\067\064\070\034\071\033\072\047\073\107\074" +
    "\043\001\002\000\040\011\103\012\077\013\104\014\076" +
    "\015\100\016\102\032\073\053\101\054\uff9d\067\064\070" +
    "\034\071\033\072\047\073\107\074\043\001\002\000\004" +
    "\054\uff9f\001\002\000\004\054\122\001\002\000\064\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051" +
    "\uffea\053\uffea\054\uffea\064\uffea\065\uffea\066\uffea\067\uffea" +
    "\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\001\002\000" +
    "\004\054\uffa0\001\002\000\004\054\uffa1\001\002\000\004" +
    "\054\uff9e\001\002\000\004\054\uffa2\001\002\000\004\051" +
    "\130\001\002\000\074\003\uff79\005\uff79\006\uff79\007\uff79" +
    "\011\uff79\012\uff79\013\uff79\014\uff79\015\uff79\016\uff79\017" +
    "\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79" +
    "\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\060\uff79\067" +
    "\uff79\070\uff79\071\uff79\072\uff79\073\uff79\074\uff79\001\002" +
    "\000\016\034\133\035\134\036\136\037\137\040\132\054" +
    "\135\001\002\000\020\053\101\067\064\070\034\071\033" +
    "\072\047\073\107\074\043\001\002\000\020\053\101\067" +
    "\064\070\034\071\033\072\047\073\107\074\043\001\002" +
    "\000\020\053\101\067\064\070\034\071\033\072\047\073" +
    "\107\074\043\001\002\000\064\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\053\ufff0\054\ufff0" +
    "\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072" +
    "\ufff0\073\ufff0\074\ufff0\001\002\000\020\053\101\067\064" +
    "\070\034\071\033\072\047\073\107\074\043\001\002\000" +
    "\020\053\101\067\064\070\034\071\033\072\047\073\107" +
    "\074\043\001\002\000\070\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\053\116\054\uffe7\062" +
    "\114\063\112\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\071\uffe7\072\uffe7\073\uffe7\074\uffe7\001\002\000\016\034" +
    "\142\035\144\036\146\037\147\040\143\054\145\001\002" +
    "\000\020\053\101\067\064\070\034\071\033\072\047\073" +
    "\107\074\043\001\002\000\020\053\101\067\064\070\034" +
    "\071\033\072\047\073\107\074\043\001\002\000\020\053" +
    "\101\067\064\070\034\071\033\072\047\073\107\074\043" +
    "\001\002\000\064\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec" +
    "\047\uffec\050\uffec\051\uffec\053\uffec\054\uffec\064\uffec\065" +
    "\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec" +
    "\074\uffec\001\002\000\020\053\101\067\064\070\034\071" +
    "\033\072\047\073\107\074\043\001\002\000\020\053\101" +
    "\067\064\070\034\071\033\072\047\073\107\074\043\001" +
    "\002\000\064\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\143" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047" +
    "\ufff2\050\ufff2\051\ufff2\053\ufff2\054\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074" +
    "\ufff2\001\002\000\064\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\040\143\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\053\ufff3\054\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073" +
    "\ufff3\074\ufff3\001\002\000\064\034\ufff4\035\ufff4\036\146" +
    "\037\147\040\143\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\053\ufff4\054\ufff4" +
    "\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072" +
    "\ufff4\073\ufff4\074\ufff4\001\002\000\064\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\053\ufff1" +
    "\054\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071" +
    "\ufff1\072\ufff1\073\ufff1\074\ufff1\001\002\000\064\034\ufff5" +
    "\035\ufff5\036\146\037\147\040\143\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\053\ufff5\054\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\001\002\000\016" +
    "\034\142\035\144\036\146\037\147\040\143\054\156\001" +
    "\002\000\064\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\053\uffed\054\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074" +
    "\uffed\001\002\000\016\034\142\035\144\036\146\037\147" +
    "\040\143\054\160\001\002\000\064\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\053\uffee\054" +
    "\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee" +
    "\072\uffee\073\uffee\074\uffee\001\002\000\016\034\142\035" +
    "\144\036\146\037\147\040\143\054\162\001\002\000\064" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\053\uffef\054\uffef\064\uffef\065\uffef\066\uffef\067" +
    "\uffef\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\001\002" +
    "\000\016\034\142\035\144\036\146\037\147\040\143\054" +
    "\164\001\002\000\064\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\053\uffeb\054\uffeb\064\uffeb" +
    "\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073" +
    "\uffeb\074\uffeb\001\002\000\020\034\142\035\144\036\146" +
    "\037\147\040\143\050\166\054\uffa4\001\002\000\040\011" +
    "\103\012\077\013\104\014\076\015\100\016\102\032\073" +
    "\053\101\054\uff9d\067\064\070\034\071\033\072\047\073" +
    "\107\074\043\001\002\000\004\054\uffa3\001\002\000\040" +
    "\011\103\012\077\013\104\014\076\015\100\016\102\032" +
    "\073\053\101\054\uff9d\067\064\070\034\071\033\072\047" +
    "\073\107\074\043\001\002\000\004\054\uffa5\001\002\000" +
    "\016\034\uffb5\035\uffb5\036\uffb5\045\uffb5\050\071\051\uffb5" +
    "\001\002\000\014\034\uffb4\035\uffb4\036\uffb4\045\uffb4\051" +
    "\uffb4\001\002\000\004\061\175\001\002\000\004\073\176" +
    "\001\002\000\004\053\177\001\002\000\020\053\101\067" +
    "\064\070\034\071\033\072\047\073\107\074\043\001\002" +
    "\000\016\034\142\035\144\036\146\037\147\040\143\054" +
    "\201\001\002\000\004\051\202\001\002\000\074\003\uff96" +
    "\005\uff96\006\uff96\007\uff96\011\uff96\012\uff96\013\uff96\014" +
    "\uff96\015\uff96\016\uff96\017\uff96\021\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032" +
    "\uff96\033\uff96\060\uff96\067\uff96\070\uff96\071\uff96\072\uff96" +
    "\073\uff96\074\uff96\001\002\000\004\045\204\001\002\000" +
    "\016\067\064\070\034\071\033\072\047\073\107\074\043" +
    "\001\002\000\016\067\064\070\034\071\033\072\047\073" +
    "\107\074\043\001\002\000\004\053\207\001\002\000\040" +
    "\011\103\012\077\013\104\014\076\015\100\016\102\032" +
    "\073\053\101\054\uff9d\067\064\070\034\071\033\072\047" +
    "\073\107\074\043\001\002\000\004\054\211\001\002\000" +
    "\004\051\212\001\002\000\074\003\uff7a\005\uff7a\006\uff7a" +
    "\007\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016" +
    "\uff7a\017\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a" +
    "\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\060" +
    "\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\074\uff7a" +
    "\001\002\000\004\060\uffcc\001\002\000\070\003\uff8a\005" +
    "\uff8a\006\uff8a\007\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a" +
    "\015\uff8a\016\uff8a\017\uff8a\021\uff8a\022\uff8a\023\uff8a\024" +
    "\uff8a\026\uff8a\027\uff8a\030\uff8a\032\uff8a\033\uff8a\060\uff8a" +
    "\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\001" +
    "\002\000\070\003\225\005\007\006\012\007\010\011\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\057\021" +
    "\052\022\044\023\063\024\056\026\221\027\230\030\uffbf" +
    "\032\uffa7\033\013\060\uffbf\067\064\070\034\071\033\072" +
    "\047\073\067\074\043\001\002\000\074\003\225\005\007" +
    "\006\012\007\010\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\057\021\052\022\044\023\063\024\056" +
    "\025\uffbf\026\221\027\230\030\uffbf\031\uffbf\032\uffa7\033" +
    "\013\060\uffbf\067\064\070\034\071\033\072\047\073\067" +
    "\074\043\001\002\000\074\003\225\005\007\006\012\007" +
    "\010\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\017\057\021\052\022\044\023\063\024\056\025\uffbf\026" +
    "\221\027\230\030\uffbf\031\uffbf\032\uffa7\033\013\060\uffbf" +
    "\067\064\070\034\071\033\072\047\073\067\074\043\001" +
    "\002\000\022\011\103\012\077\013\104\014\076\015\100" +
    "\016\102\032\073\073\uffac\001\002\000\004\051\305\001" +
    "\002\000\074\003\225\005\007\006\012\007\010\011\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\057\021" +
    "\052\022\044\023\063\024\056\025\uffbf\026\221\027\230" +
    "\030\uffbf\031\uffbf\032\uffa7\033\013\060\uffbf\067\064\070" +
    "\034\071\033\072\047\073\067\074\043\001\002\000\074" +
    "\003\225\005\007\006\012\007\010\011\uffa7\012\uffa7\013" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\057\021\052\022\044" +
    "\023\063\024\056\025\uffbf\026\221\027\230\030\uffbf\031" +
    "\uffbf\032\uffa7\033\013\060\uffbf\067\064\070\034\071\033" +
    "\072\047\073\067\074\043\001\002\000\074\003\225\005" +
    "\007\006\012\007\010\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\057\021\052\022\044\023\063\024" +
    "\056\025\uffbf\026\221\027\230\030\uffbf\031\uffbf\032\uffa7" +
    "\033\013\060\uffbf\067\064\070\034\071\033\072\047\073" +
    "\067\074\043\001\002\000\006\051\301\060\300\001\002" +
    "\000\006\030\234\060\uff7d\001\002\000\074\003\225\005" +
    "\007\006\012\007\010\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\057\021\052\022\044\023\063\024" +
    "\056\025\uffbf\026\221\027\230\030\uffbf\031\uffbf\032\uffa7" +
    "\033\013\060\uffbf\067\064\070\034\071\033\072\047\073" +
    "\067\074\043\001\002\000\004\051\231\001\002\000\074" +
    "\003\uff7c\005\uff7c\006\uff7c\007\uff7c\011\uff7c\012\uff7c\013" +
    "\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c\021\uff7c\022\uff7c" +
    "\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031" +
    "\uff7c\032\uff7c\033\uff7c\060\uff7c\067\uff7c\070\uff7c\071\uff7c" +
    "\072\uff7c\073\uff7c\074\uff7c\001\002\000\012\025\uffc4\030" +
    "\uffc4\031\uffc4\060\uffc4\001\002\000\004\060\240\001\002" +
    "\000\022\051\235\053\101\067\064\070\034\071\033\072" +
    "\047\073\107\074\043\001\002\000\010\025\uff7e\031\uff7e" +
    "\060\uff7e\001\002\000\016\034\142\035\144\036\146\037" +
    "\147\040\143\051\237\001\002\000\010\025\uff7f\031\uff7f" +
    "\060\uff7f\001\002\000\004\022\241\001\002\000\004\053" +
    "\242\001\002\000\030\053\101\054\uffe2\064\245\065\244" +
    "\066\243\067\064\070\034\071\033\072\047\073\107\074" +
    "\043\001\002\000\020\053\101\067\064\070\034\071\033" +
    "\072\047\073\107\074\043\001\002\000\020\053\101\067" +
    "\064\070\034\071\033\072\047\073\107\074\043\001\002" +
    "\000\020\053\101\067\064\070\034\071\033\072\047\073" +
    "\107\074\043\001\002\000\006\051\uffe3\054\uffe3\001\002" +
    "\000\034\034\142\035\144\036\146\037\147\040\143\041" +
    "\255\042\257\043\260\044\253\046\254\047\256\051\uffdb" +
    "\054\uffdb\001\002\000\004\054\251\001\002\000\004\051" +
    "\252\001\002\000\074\003\uff89\005\uff89\006\uff89\007\uff89" +
    "\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017" +
    "\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89" +
    "\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\060\uff89\067" +
    "\uff89\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89\001\002" +
    "\000\020\053\101\067\064\070\034\071\033\072\047\073" +
    "\107\074\043\001\002\000\020\053\101\067\064\070\034" +
    "\071\033\072\047\073\107\074\043\001\002\000\020\053" +
    "\101\067\064\070\034\071\033\072\047\073\107\074\043" +
    "\001\002\000\020\053\101\067\064\070\034\071\033\072" +
    "\047\073\107\074\043\001\002\000\020\053\101\067\064" +
    "\070\034\071\033\072\047\073\107\074\043\001\002\000" +
    "\020\053\101\067\064\070\034\071\033\072\047\073\107" +
    "\074\043\001\002\000\044\034\142\035\144\036\146\037" +
    "\147\040\143\051\uffe2\053\101\054\uffe2\064\245\065\244" +
    "\066\243\067\064\070\034\071\033\072\047\073\107\074" +
    "\043\001\002\000\006\051\uffe1\054\uffe1\001\002\000\044" +
    "\034\142\035\144\036\146\037\147\040\143\051\uffe2\053" +
    "\101\054\uffe2\064\245\065\244\066\243\067\064\070\034" +
    "\071\033\072\047\073\107\074\043\001\002\000\006\051" +
    "\uffde\054\uffde\001\002\000\044\034\142\035\144\036\146" +
    "\037\147\040\143\051\uffe2\053\101\054\uffe2\064\245\065" +
    "\244\066\243\067\064\070\034\071\033\072\047\073\107" +
    "\074\043\001\002\000\006\051\uffdc\054\uffdc\001\002\000" +
    "\044\034\142\035\144\036\146\037\147\040\143\051\uffe2" +
    "\053\101\054\uffe2\064\245\065\244\066\243\067\064\070" +
    "\034\071\033\072\047\073\107\074\043\001\002\000\006" +
    "\051\uffe0\054\uffe0\001\002\000\044\034\142\035\144\036" +
    "\146\037\147\040\143\051\uffe2\053\101\054\uffe2\064\245" +
    "\065\244\066\243\067\064\070\034\071\033\072\047\073" +
    "\107\074\043\001\002\000\006\051\uffdd\054\uffdd\001\002" +
    "\000\044\034\142\035\144\036\146\037\147\040\143\051" +
    "\uffe2\053\101\054\uffe2\064\245\065\244\066\243\067\064" +
    "\070\034\071\033\072\047\073\107\074\043\001\002\000" +
    "\006\051\uffdf\054\uffdf\001\002\000\006\051\uffe6\054\uffe6" +
    "\001\002\000\006\051\uffe5\054\uffe5\001\002\000\006\051" +
    "\uffe4\054\uffe4\001\002\000\012\025\uffc1\030\uffc1\031\uffc1" +
    "\060\uffc1\001\002\000\012\025\uffc0\030\uffc0\031\uffc0\060" +
    "\uffc0\001\002\000\012\025\uffc3\030\uffc3\031\uffc3\060\uffc3" +
    "\001\002\000\012\025\uffc2\030\uffc2\031\uffc2\060\uffc2\001" +
    "\002\000\012\025\uffc6\030\uffc6\031\uffc6\060\uffc6\001\002" +
    "\000\074\003\uff7b\005\uff7b\006\uff7b\007\uff7b\011\uff7b\012" +
    "\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\021\uff7b" +
    "\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030" +
    "\uff7b\031\uff7b\032\uff7b\033\uff7b\060\uff7b\067\uff7b\070\uff7b" +
    "\071\uff7b\072\uff7b\073\uff7b\074\uff7b\001\002\000\004\073" +
    "\172\001\002\000\014\034\312\035\313\036\314\045\310" +
    "\051\311\001\002\000\020\053\ufff6\067\ufff6\070\ufff6\071" +
    "\ufff6\072\ufff6\073\ufff6\074\ufff6\001\002\000\074\003\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\060\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8" +
    "\073\uffb8\074\uffb8\001\002\000\004\045\322\001\002\000" +
    "\004\045\321\001\002\000\004\045\320\001\002\000\020" +
    "\053\101\067\064\070\034\071\033\072\047\073\107\074" +
    "\043\001\002\000\016\034\142\035\144\036\146\037\147" +
    "\040\143\051\317\001\002\000\074\003\uffb7\005\uffb7\006" +
    "\uffb7\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\060\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074" +
    "\uffb7\001\002\000\020\053\ufff7\067\ufff7\070\ufff7\071\ufff7" +
    "\072\ufff7\073\ufff7\074\ufff7\001\002\000\020\053\ufff8\067" +
    "\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\001\002" +
    "\000\020\053\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073" +
    "\ufff9\074\ufff9\001\002\000\012\025\uffc5\030\uffc5\031\uffc5" +
    "\060\uffc5\001\002\000\012\025\uffc7\030\uffc7\031\uffc7\060" +
    "\uffc7\001\002\000\004\060\uffca\001\002\000\004\060\uffc9" +
    "\001\002\000\004\032\330\001\002\000\004\073\331\001" +
    "\002\000\004\053\332\001\002\000\004\013\333\001\002" +
    "\000\004\055\334\001\002\000\004\056\335\001\002\000" +
    "\004\073\336\001\002\000\004\054\337\001\002\000\004" +
    "\057\340\001\002\000\066\003\uffba\005\uffba\006\uffba\007" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\021\uffba\022\uffba\023\uffba\024\uffba\026\uffba\027" +
    "\uffba\032\uffba\033\uffba\060\uffba\067\uffba\070\uffba\071\uffba" +
    "\072\uffba\073\uffba\074\uffba\001\002\000\066\003\225\005" +
    "\007\006\012\007\010\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\057\021\052\022\044\023\063\024" +
    "\056\026\221\027\230\032\uffa7\033\013\060\uffbf\067\064" +
    "\070\034\071\033\072\047\073\067\074\043\001\002\000" +
    "\004\060\343\001\002\000\062\003\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\032\uffb9" +
    "\033\uffb9\060\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073" +
    "\uffb9\074\uffb9\001\002\000\030\053\101\054\uffe2\064\245" +
    "\065\244\066\243\067\064\070\034\071\033\072\047\073" +
    "\107\074\043\001\002\000\004\054\346\001\002\000\004" +
    "\057\347\001\002\000\070\003\uff95\005\uff95\006\uff95\007" +
    "\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95" +
    "\017\uff95\021\uff95\022\uff95\023\uff95\024\uff95\026\uff95\027" +
    "\uff95\030\uff95\032\uff95\033\uff95\060\uff95\067\uff95\070\uff95" +
    "\071\uff95\072\uff95\073\uff95\074\uff95\001\002\000\070\003" +
    "\225\005\007\006\012\007\010\011\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\017\057\021\052\022\044\023" +
    "\063\024\056\026\221\027\230\030\uffbf\032\uffa7\033\013" +
    "\060\uffbf\067\064\070\034\071\033\072\047\073\067\074" +
    "\043\001\002\000\006\030\234\060\uff7d\001\002\000\004" +
    "\060\353\001\002\000\076\003\uff94\005\uff94\006\uff94\007" +
    "\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94" +
    "\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025" +
    "\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94" +
    "\060\uff94\067\uff94\070\uff94\071\uff94\072\uff94\073\uff94\074" +
    "\uff94\001\002\000\020\053\101\067\064\070\034\071\033" +
    "\072\047\073\107\074\043\001\002\000\016\034\142\035" +
    "\144\036\146\037\147\040\143\054\356\001\002\000\004" +
    "\057\357\001\002\000\004\025\uff88\001\002\000\004\025" +
    "\361\001\002\000\016\067\064\070\034\071\033\072\047" +
    "\073\107\074\043\001\002\000\004\052\363\001\002\000" +
    "\074\003\uff87\005\uff87\006\uff87\007\uff87\011\uff87\012\uff87" +
    "\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\021\uff87\022" +
    "\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87" +
    "\031\uff87\032\uff87\033\uff87\060\uff87\067\uff87\070\uff87\071" +
    "\uff87\072\uff87\073\uff87\074\uff87\001\002\000\074\003\225" +
    "\005\007\006\012\007\010\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\057\021\052\022\044\023\063" +
    "\024\056\025\uffbf\026\221\027\230\030\uffbf\031\uffbf\032" +
    "\uffa7\033\013\060\uffbf\067\064\070\034\071\033\072\047" +
    "\073\067\074\043\001\002\000\012\025\uff7d\030\234\031" +
    "\uff7d\060\uff7d\001\002\000\010\025\367\031\uff83\060\uff83" +
    "\001\002\000\016\067\064\070\034\071\033\072\047\073" +
    "\107\074\043\001\002\000\006\031\372\060\uff80\001\002" +
    "\000\004\060\377\001\002\000\004\052\373\001\002\000" +
    "\070\003\uff82\005\uff82\006\uff82\007\uff82\011\uff82\012\uff82" +
    "\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\021\uff82\022" +
    "\uff82\023\uff82\024\uff82\026\uff82\027\uff82\030\uff82\032\uff82" +
    "\033\uff82\060\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073" +
    "\uff82\074\uff82\001\002\000\070\003\225\005\007\006\012" +
    "\007\010\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\017\057\021\052\022\044\023\063\024\056\026\221" +
    "\027\230\030\uffbf\032\uffa7\033\013\060\uffbf\067\064\070" +
    "\034\071\033\072\047\073\067\074\043\001\002\000\006" +
    "\030\234\060\uff7d\001\002\000\004\060\uff81\001\002\000" +
    "\074\003\uff86\005\uff86\006\uff86\007\uff86\011\uff86\012\uff86" +
    "\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86\021\uff86\022" +
    "\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86" +
    "\031\uff86\032\uff86\033\uff86\060\uff86\067\uff86\070\uff86\071" +
    "\uff86\072\uff86\073\uff86\074\uff86\001\002\000\004\052\u0101" +
    "\001\002\000\074\003\uff85\005\uff85\006\uff85\007\uff85\011" +
    "\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85" +
    "\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027" +
    "\uff85\030\uff85\031\uff85\032\uff85\033\uff85\060\uff85\067\uff85" +
    "\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85\001\002\000" +
    "\074\003\225\005\007\006\012\007\010\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\057\021\052\022" +
    "\044\023\063\024\056\025\uffbf\026\221\027\230\030\uffbf" +
    "\031\uffbf\032\uffa7\033\013\060\uffbf\067\064\070\034\071" +
    "\033\072\047\073\067\074\043\001\002\000\012\025\uff7d" +
    "\030\234\031\uff7d\060\uff7d\001\002\000\010\025\367\031" +
    "\uff83\060\uff83\001\002\000\006\031\uff84\060\uff84\001\002" +
    "\000\004\060\uffcb\001\002\000\004\060\uffd0\001\002\000" +
    "\004\060\uffce\001\002\000\022\011\103\012\077\013\104" +
    "\014\076\015\100\016\102\032\073\073\uffac\001\002\000" +
    "\004\073\172\001\002\000\012\034\312\035\313\036\314" +
    "\045\310\001\002\000\020\053\101\067\064\070\034\071" +
    "\033\072\047\073\107\074\043\001\002\000\016\034\142" +
    "\035\144\036\146\037\147\040\143\051\u010e\001\002\000" +
    "\020\053\101\067\064\070\034\071\033\072\047\073\107" +
    "\074\043\001\002\000\004\051\u0110\001\002\000\020\053" +
    "\101\067\064\070\034\071\033\072\047\073\107\074\043" +
    "\001\002\000\020\034\142\035\144\036\146\037\147\040" +
    "\143\045\u0112\054\u0113\001\002\000\040\011\103\012\077" +
    "\013\104\014\076\015\100\016\102\032\073\053\101\054" +
    "\uff9d\067\064\070\034\071\033\072\047\073\107\074\043" +
    "\001\002\000\004\057\u0114\001\002\000\070\003\uff90\005" +
    "\uff90\006\uff90\007\uff90\011\uff90\012\uff90\013\uff90\014\uff90" +
    "\015\uff90\016\uff90\017\uff90\021\uff90\022\uff90\023\uff90\024" +
    "\uff90\026\uff90\027\uff90\030\uff90\032\uff90\033\uff90\060\uff90" +
    "\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\001" +
    "\002\000\070\003\225\005\007\006\012\007\010\011\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\057\021" +
    "\052\022\044\023\063\024\056\026\221\027\230\030\uffbf" +
    "\032\uffa7\033\013\060\uffbf\067\064\070\034\071\033\072" +
    "\047\073\067\074\043\001\002\000\006\030\234\060\uff7d" +
    "\001\002\000\004\060\u0118\001\002\000\074\003\uff8f\005" +
    "\uff8f\006\uff8f\007\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f" +
    "\015\uff8f\016\uff8f\017\uff8f\021\uff8f\022\uff8f\023\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f" +
    "\033\uff8f\060\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073" +
    "\uff8f\074\uff8f\001\002\000\004\054\u011a\001\002\000\004" +
    "\057\u011b\001\002\000\070\003\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\026\uff8e\027" +
    "\uff8e\030\uff8e\032\uff8e\033\uff8e\060\uff8e\067\uff8e\070\uff8e" +
    "\071\uff8e\072\uff8e\073\uff8e\074\uff8e\001\002\000\070\003" +
    "\225\005\007\006\012\007\010\011\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\017\057\021\052\022\044\023" +
    "\063\024\056\026\221\027\230\030\uffbf\032\uffa7\033\013" +
    "\060\uffbf\067\064\070\034\071\033\072\047\073\067\074" +
    "\043\001\002\000\006\030\234\060\uff7d\001\002\000\004" +
    "\060\u011f\001\002\000\074\003\uff8d\005\uff8d\006\uff8d\007" +
    "\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d" +
    "\017\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026" +
    "\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\060\uff8d" +
    "\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\001" +
    "\002\000\004\002\uffd3\001\002\000\020\053\101\067\064" +
    "\070\034\071\033\072\047\073\107\074\043\001\002\000" +
    "\016\034\142\035\144\036\146\037\147\040\143\051\u0123" +
    "\001\002\000\074\003\uffb6\005\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\060\uffb6\067\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\001\002\000" +
    "\030\053\101\054\uffe2\064\245\065\244\066\243\067\064" +
    "\070\034\071\033\072\047\073\107\074\043\001\002\000" +
    "\004\054\u0126\001\002\000\004\057\u0127\001\002\000\070" +
    "\003\uff8c\005\uff8c\006\uff8c\007\uff8c\011\uff8c\012\uff8c\013" +
    "\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\024\uff8c\026\uff8c\027\uff8c\030\uff8c\032\uff8c\033" +
    "\uff8c\060\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c" +
    "\074\uff8c\001\002\000\070\003\225\005\007\006\012\007" +
    "\010\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\017\057\021\052\022\044\023\063\024\056\026\221\027" +
    "\230\030\uffbf\032\uffa7\033\013\060\uffbf\067\064\070\034" +
    "\071\033\072\047\073\067\074\043\001\002\000\006\030" +
    "\234\060\uff7d\001\002\000\004\060\u012b\001\002\000\074" +
    "\003\uff8b\005\uff8b\006\uff8b\007\uff8b\011\uff8b\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\021\uff8b\022\uff8b" +
    "\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\060\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\072\uff8b\073\uff8b\074\uff8b\001\002\000\004\073\u0137\001" +
    "\002\000\004\073\u012e\001\002\000\020\034\uffb5\035\uffb5" +
    "\036\uffb5\045\uffb5\050\071\051\uffb5\053\u012f\001\002\000" +
    "\040\011\103\012\077\013\104\014\076\015\100\016\102" +
    "\032\073\053\101\054\uff9d\067\064\070\034\071\033\072" +
    "\047\073\107\074\043\001\002\000\004\054\u0131\001\002" +
    "\000\004\057\u0132\001\002\000\070\003\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\032\uffbe\033\uffbe\060\uffbe\067\uffbe" +
    "\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\001\002\000" +
    "\070\003\225\005\007\006\012\007\010\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\057\021\052\022" +
    "\044\023\063\024\056\026\221\027\230\030\uffbf\032\uffa7" +
    "\033\013\060\uffbf\067\064\070\034\071\033\072\047\073" +
    "\067\074\043\001\002\000\006\030\234\060\uff7d\001\002" +
    "\000\004\060\u0136\001\002\000\062\003\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\032" +
    "\uffbd\033\uffbd\060\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\001\002\000\004\053\u0138\001\002\000" +
    "\040\011\103\012\077\013\104\014\076\015\100\016\102" +
    "\032\073\053\101\054\uff9d\067\064\070\034\071\033\072" +
    "\047\073\107\074\043\001\002\000\004\054\u013a\001\002" +
    "\000\004\057\u013b\001\002\000\070\003\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\032\uffbc\033\uffbc\060\uffbc\067\uffbc" +
    "\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\001\002\000" +
    "\070\003\225\005\007\006\012\007\010\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\057\021\052\022" +
    "\044\023\063\024\056\026\221\027\230\030\uffbf\032\uffa7" +
    "\033\013\060\uffbf\067\064\070\034\071\033\072\047\073" +
    "\067\074\043\001\002\000\006\030\234\060\uff7d\001\002" +
    "\000\004\060\u013f\001\002\000\062\003\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\032" +
    "\uffbb\033\uffbb\060\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb" +
    "\073\uffbb\074\uffbb\001\002\000\004\060\uffcd\001\002\000" +
    "\004\060\uffd1\001\002\000\004\060\uffcf\001\002\000\004" +
    "\057\u0145\001\002\000\076\003\uff93\005\uff93\006\uff93\007" +
    "\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93" +
    "\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025" +
    "\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93" +
    "\060\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074" +
    "\uff93\001\002\000\070\003\uff92\005\uff92\006\uff92\007\uff92" +
    "\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017" +
    "\uff92\021\uff92\022\uff92\023\uff92\024\uff92\026\uff92\027\uff92" +
    "\030\uff92\032\uff92\033\uff92\060\uff92\067\uff92\070\uff92\071" +
    "\uff92\072\uff92\073\uff92\074\uff92\001\002\000\070\003\225" +
    "\005\007\006\012\007\010\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\057\021\052\022\044\023\063" +
    "\024\056\026\221\027\230\030\uffbf\032\uffa7\033\013\060" +
    "\uffbf\067\064\070\034\071\033\072\047\073\067\074\043" +
    "\001\002\000\006\030\234\060\uff7d\001\002\000\004\060" +
    "\u0149\001\002\000\076\003\uff91\005\uff91\006\uff91\007\uff91" +
    "\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\060" +
    "\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\012\002\004\003\010\004\013\011\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\022\001" +
    "\001\000\004\044\020\001\001\000\012\002\021\003\010" +
    "\004\013\011\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\030\001\001\000\044\007" +
    "\065\011\040\012\047\013\036\014\035\015\052\016\037" +
    "\021\045\024\031\025\064\027\041\030\060\031\034\032" +
    "\050\036\053\037\054\042\044\001\001\000\004\026\u0143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\007\065\011\040\012\u0141\013\036\014\035" +
    "\015\052\016\037\021\045\024\031\025\064\027\041\030" +
    "\060\031\034\032\050\036\053\037\054\042\044\001\001" +
    "\000\044\007\065\011\040\012\u0140\013\036\014\035\015" +
    "\052\016\037\021\045\024\031\025\064\027\041\030\060" +
    "\031\034\032\050\036\053\037\054\042\044\001\001\000" +
    "\044\007\065\011\040\012\u013f\013\036\014\035\015\052" +
    "\016\037\021\045\024\031\025\064\027\041\030\060\031" +
    "\034\032\050\036\053\037\054\042\044\001\001\000\004" +
    "\010\u012c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\007\065\011\040\012\u0107\013\036" +
    "\014\035\015\052\016\037\021\045\024\031\025\064\027" +
    "\041\030\060\031\034\032\050\036\053\037\054\042\044" +
    "\001\001\000\044\007\065\011\040\012\u0106\013\036\014" +
    "\035\015\052\016\037\021\045\024\031\025\064\027\041" +
    "\030\060\031\034\032\050\036\053\037\054\042\044\001" +
    "\001\000\044\007\065\011\040\012\u0105\013\036\014\035" +
    "\015\052\016\037\021\045\024\031\025\064\027\041\030" +
    "\060\031\034\032\050\036\053\037\054\042\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\007\065\011\040\012\212\013\036\014" +
    "\035\015\052\016\037\021\045\024\031\025\064\027\041" +
    "\030\060\031\034\032\050\036\053\037\054\042\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\172\001\001\000\012\006\073\007\105\010" +
    "\074\017\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\164\007\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\073\007\105\010\074\017\125\001\001\000\012\006" +
    "\073\007\105\010\074\017\124\001\001\000\002\001\001" +
    "\000\012\006\073\007\105\010\074\017\123\001\001\000" +
    "\002\001\001\000\012\006\073\007\105\010\074\017\122" +
    "\001\001\000\012\006\073\007\105\010\074\017\120\001" +
    "\001\000\012\006\073\007\105\010\074\017\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\162\007\137\001\001\000\006\006\160" +
    "\007\137\001\001\000\006\006\156\007\137\001\001\000" +
    "\002\001\001\000\006\006\154\007\137\001\001\000\006" +
    "\006\140\007\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\153\007\137\001\001\000\006\006\152" +
    "\007\137\001\001\000\006\006\151\007\137\001\001\000" +
    "\002\001\001\000\006\006\150\007\137\001\001\000\006" +
    "\006\147\007\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\073\007\105\010\074\017\166\001\001\000\002\001\001" +
    "\000\012\006\073\007\105\010\074\017\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\177\007\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\204\001" +
    "\001\000\004\007\205\001\001\000\002\001\001\000\012" +
    "\006\073\007\105\010\074\017\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\214\001\001\000\042\007\065\011\217\014" +
    "\215\015\221\016\216\020\225\021\045\024\031\025\226" +
    "\027\041\030\060\031\034\032\050\037\223\042\044\043" +
    "\222\001\001\000\042\007\065\011\217\014\215\015\221" +
    "\016\216\020\323\021\045\024\031\025\226\027\041\030" +
    "\060\031\034\032\050\037\223\042\044\043\222\001\001" +
    "\000\042\007\065\011\217\014\215\015\221\016\216\020" +
    "\322\021\045\024\031\025\226\027\041\030\060\031\034" +
    "\032\050\037\223\042\044\043\222\001\001\000\004\010" +
    "\305\001\001\000\002\001\001\000\042\007\065\011\217" +
    "\014\215\015\221\016\216\020\303\021\045\024\031\025" +
    "\226\027\041\030\060\031\034\032\050\037\223\042\044" +
    "\043\222\001\001\000\042\007\065\011\217\014\215\015" +
    "\221\016\216\020\302\021\045\024\031\025\226\027\041" +
    "\030\060\031\034\032\050\037\223\042\044\043\222\001" +
    "\001\000\042\007\065\011\217\014\215\015\221\016\216" +
    "\020\301\021\045\024\031\025\226\027\041\030\060\031" +
    "\034\032\050\037\223\042\044\043\222\001\001\000\002" +
    "\001\001\000\004\034\232\001\001\000\042\007\065\011" +
    "\217\014\215\015\221\016\216\020\231\021\045\024\031" +
    "\025\226\027\041\030\060\031\034\032\050\037\223\042" +
    "\044\043\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\235\007" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\246\007\137\022\245\033\247\001\001\000\010\006\246" +
    "\007\137\022\276\001\001\000\010\006\246\007\137\022" +
    "\275\001\001\000\010\006\246\007\137\022\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\272\007\137" +
    "\001\001\000\006\006\270\007\137\001\001\000\006\006" +
    "\266\007\137\001\001\000\006\006\264\007\137\001\001" +
    "\000\006\006\262\007\137\001\001\000\006\006\260\007" +
    "\137\001\001\000\012\006\246\007\137\022\245\033\261" +
    "\001\001\000\002\001\001\000\012\006\246\007\137\022" +
    "\245\033\263\001\001\000\002\001\001\000\012\006\246" +
    "\007\137\022\245\033\265\001\001\000\002\001\001\000" +
    "\012\006\246\007\137\022\245\033\267\001\001\000\002" +
    "\001\001\000\012\006\246\007\137\022\245\033\271\001" +
    "\001\000\002\001\001\000\012\006\246\007\137\022\245" +
    "\033\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\306\001\001\000\004" +
    "\023\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\315\007\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\340\001\001\000\042\007\065\011\217\014" +
    "\215\015\221\016\216\020\341\021\045\024\031\025\226" +
    "\027\041\030\060\031\034\032\050\037\223\042\044\043" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\246\007\137\022\245\033\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\347\001\001\000\042" +
    "\007\065\011\217\014\215\015\221\016\216\020\350\021" +
    "\045\024\031\025\226\027\041\030\060\031\034\032\050" +
    "\037\223\042\044\043\222\001\001\000\004\034\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\354" +
    "\007\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\357\001\001\000\002\001\001\000\004\007\361" +
    "\001\001\000\002\001\001\000\004\060\363\001\001\000" +
    "\042\007\065\011\217\014\215\015\221\016\216\020\364" +
    "\021\045\024\031\025\226\027\041\030\060\031\034\032" +
    "\050\037\223\042\044\043\222\001\001\000\004\034\365" +
    "\001\001\000\004\035\367\001\001\000\004\007\377\001" +
    "\001\000\004\041\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\373\001\001\000\042\007\065\011" +
    "\217\014\215\015\221\016\216\020\374\021\045\024\031" +
    "\025\226\027\041\030\060\031\034\032\050\037\223\042" +
    "\044\043\222\001\001\000\004\034\375\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\u0101\001\001\000\042\007\065\011\217\014\215\015\221" +
    "\016\216\020\u0102\021\045\024\031\025\226\027\041\030" +
    "\060\031\034\032\050\037\223\042\044\043\222\001\001" +
    "\000\004\034\u0103\001\001\000\004\035\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\u0109\001\001\000\004\021\u010a\001" +
    "\001\000\004\023\u010b\001\001\000\006\006\u010c\007\137" +
    "\001\001\000\002\001\001\000\010\006\246\007\137\022" +
    "\u010e\001\001\000\002\001\001\000\006\006\u0110\007\137" +
    "\001\001\000\002\001\001\000\012\006\073\007\105\010" +
    "\074\017\u0118\001\001\000\002\001\001\000\004\053\u0114" +
    "\001\001\000\042\007\065\011\217\014\215\015\221\016" +
    "\216\020\u0115\021\045\024\031\025\226\027\041\030\060" +
    "\031\034\032\050\037\223\042\044\043\222\001\001\000" +
    "\004\034\u0116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\u011b\001" +
    "\001\000\042\007\065\011\217\014\215\015\221\016\216" +
    "\020\u011c\021\045\024\031\025\226\027\041\030\060\031" +
    "\034\032\050\037\223\042\044\043\222\001\001\000\004" +
    "\034\u011d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u0121\007\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\246\007\137\022" +
    "\245\033\u0124\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\u0127\001\001\000\042\007\065\011\217\014" +
    "\215\015\221\016\216\020\u0128\021\045\024\031\025\226" +
    "\027\041\030\060\031\034\032\050\037\223\042\044\043" +
    "\222\001\001\000\004\034\u0129\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\306\001" +
    "\001\000\002\001\001\000\012\006\073\007\105\010\074" +
    "\017\u012f\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0132\001\001\000\042\007\065\011\217\014\215" +
    "\015\221\016\216\020\u0133\021\045\024\031\025\226\027" +
    "\041\030\060\031\034\032\050\037\223\042\044\043\222" +
    "\001\001\000\004\034\u0134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\073\007\105" +
    "\010\074\017\u0138\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u013b\001\001\000\042\007\065\011\217" +
    "\014\215\015\221\016\216\020\u013c\021\045\024\031\025" +
    "\226\027\041\030\060\031\034\032\050\037\223\042\044" +
    "\043\222\001\001\000\004\034\u013d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u0145\001\001\000\042\007\065\011\217\014\215" +
    "\015\221\016\216\020\u0146\021\045\024\031\025\226\027" +
    "\041\030\060\031\034\032\050\037\223\042\044\043\222" +
    "\001\001\000\004\034\u0147\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static ArrayList al = new ArrayList();    
    public static int metodo=0;
    public static int funcionInt = 0;
    public static int funcionBool = 0;
    public static int funcionDouble = 0;
    public static int funcionString = 0;
    public static int funcionChar = 0;
    public static int declaInt = 0;
    public static int declaBool = 0;
    public static int declaDouble = 0;
    public static int declaString = 0;
    public static int declaChar = 0;
    public static int declaAsigInt = 0;
    public static int declaAsigBool = 0;
    public static int declaAsigDouble = 0;
    public static int declaAsigString = 0;
    public static int declaAsigChar = 0;
    public static int si = 0;
    public static int sino = 0;
    public static int para = 0;
    public static int mientras = 0;
    public static int hacer = 0;
    public static int selecc = 0;
    public static int continuar = 0;
    public static int interrumpir = 0;
    public static int imprim = 0;
    public static int impor = 0;
    public ArrayList erroresS = new ArrayList();
    public ArrayList erroresS1 = new ArrayList();


    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido." );

        Interfaz.jTextArea3.append("colinderes gay");
        erroresS.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;

        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador '" +
        s.value + "' no reconocido.");
        Interfaz.jTextArea3.append("colinderes gay");
        erroresS1.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/

    


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    //Nodo raiz=null;
    Sintactico sin = new Sintactico();
    

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LLAM2 ::= parA PARAM parC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		if(p==null){p="";}parser.al.add("("+p+")");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAM2",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // LLAM ::= iden parA PARAM parC puntoYcoma 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		if(p==null){p="";}parser.al.add("\t"+nom+"("+p+");\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAM",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // INSTANCIA ::= VALOR iden igual VALOR VALOR parA PARAM parC puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("instancia\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // BRECON ::= resContinue puntoYcoma 
            {
              Object RESULT =null;
		parser.continuar++;parser.al.add("\t\tcontinuar;\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BRECON",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // BRECON ::= resBreak puntoYcoma 
            {
              Object RESULT =null;
		parser.interrumpir++;parser.al.add("\t\tinterrumpir;\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BRECON",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SALIDA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIDA",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SALIDA ::= resReturn puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("\t\tretornar;\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIDA",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SALIDA ::= resReturn EXP puntoYcoma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.al.add("\t\tretornar "+e+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIDA",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DEFAULT ::= resDefault dosPuntos NT$14 COD2 SALIDA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$14 ::= 
            {
              Object RESULT =null;
parser.al.add("\t\tdefecto:\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CASES ::= resCase VALOR dosPuntos NT$13 COD2 SALIDA CASES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$13 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
parser.al.add("\t\tcaso "+v+":\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTSWITCH ::= resSwitch parA EXP parC llaveA NT$11 resCase VALOR dosPuntos NT$12 COD2 SALIDA CASES DEFAULT llaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		parser.al.add("\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTSWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
parser.al.add("\t\tcaso "+v+":\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
parser.selecc++;parser.al.add("\tselecciona("+e+"){\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTDO ::= resDo llaveA NT$10 COD2 SALIDA llaveC resWhile parA EXPSENT parC puntoYcoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("}mientras("+e+");\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTDO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$10 ::= 
            {
              Object RESULT =null;
parser.hacer++;parser.al.add("\thacer{\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTWHILE ::= resWhile parA EXPSENT parC llaveA NT$9 COD2 SALIDA llaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		parser.al.add("\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTWHILE",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$9 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
parser.mientras++;parser.al.add("\tmientras("+e+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTFOR ::= resFor parA TIPO LISTAID IGUALACION EXP puntoYcoma OPREL puntoYcoma EXP igual PARAM parC llaveA NT$8 COD2 SALIDA llaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		parser.al.add("\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTFOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$8 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
parser.para++;parser.al.add("\tpara("+tipo+" "+nomb+" = "+exp+";"+e+";"+ex+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTFOR ::= resFor parA TIPO LISTAID IGUALACION EXP puntoYcoma OPREL puntoYcoma EXP parC llaveA NT$7 COD2 SALIDA llaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		parser.al.add("\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTFOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$7 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
parser.para++;parser.al.add("\tpara("+tipo+" "+nomb+" = "+exp+";"+e+";"+ex+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTELSE ::= resElse llaveA NT$6 COD2 SALIDA llaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add("\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTELSE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$6 ::= 
            {
              Object RESULT =null;
parser.sino++;parser.al.add("\tsino{\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTIF ::= SENTIF SENTELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTIF",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTIF ::= resIf parA EXPSENT parC llaveA NT$5 COD2 SALIDA llaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		parser.al.add("\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTIF",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$5 ::= 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
parser.si++;parser.al.add("\tsi("+exp+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTIMP ::= iden punto iden punto iden parA EXP parC puntoYcoma 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.imprim++;;parser.al.add("\tSistema.salida.imprimir("+exp+");\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTIMP",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIAS ::= SENTIMP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIAS ::= SENTDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIAS ::= SENTSWITCH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIAS ::= SENTFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIAS ::= SENTWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIAS ::= SENTIF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAM ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAM ::= VALOR modulo PARAM 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"%"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAM ::= VALOR div PARAM 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAM ::= VALOR mul PARAM 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAM ::= VALOR menos PARAM 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAM ::= VALOR mas PARAM 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAM ::= TIPO EXP coma PARAM 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=tipo+" "+nomb+","+val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAM ::= TIPO EXP 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=tipo+" "+nomb;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAM ::= EXP coma PARAM 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+","+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAM ::= EXP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ACCESO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ACCESO ::= resStatic 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="estatico";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ACCESO ::= resProtected 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="protegido";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ACCESO ::= resPrivate 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="privado";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ACCESO ::= resPublic 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="publico";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TIPO ::= resVoid 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIPO ::= resObject 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="Objeto";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIPO ::= resChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="caracter";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPO ::= resDouble 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="decimal";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO ::= resBoolean 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="booleano";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO ::= resString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="Texto";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO ::= resInt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="entero";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTAID ::= iden coma LISTAID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id+","+id1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTAID ::= iden 
            {
              Object RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION ::= LISTAID IGUALACION EXP puntoYcoma 
            {
              Object RESULT =null;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.al.add("\t"+nomb+" "+ig+" "+exp+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNACION ::= ACCESO TIPO LISTAID IGUALACION EXP puntoYcoma 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		if(tipo=="entero"){parser.declaAsigInt++;}
                                                                                   if(tipo=="Texto"){parser.declaAsigString++;}
                                                                                   if(tipo=="booleano"){parser.declaAsigBool++;}
                                                                                   if(tipo=="decimal"){parser.declaAsigDouble++;}
                                                                                   if(tipo=="caracter"){parser.declaAsigChar++;}
                                                                                   if(acc==null){acc="";}parser.al.add("\t"+tipo+" "+acc+" "+nomb+" "+ig+" "+exp+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= ACCESO TIPO LISTAID puntoYcoma 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object nomb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		if(tipo=="entero"){parser.declaInt++;System.out.println("enteros:"+parser.declaInt);}
                                                              if(tipo=="Texto"){parser.declaString++;System.out.println("textos:"+parser.declaString);}
                                                              if(tipo=="booleano"){parser.declaBool++;}
                                                              if(tipo=="decimal"){parser.declaDouble++;}
                                                              if(tipo=="caracter"){parser.declaChar++;}
                                                              if(acc==null){acc="";}parser.al.add("\t"+tipo+" "+acc+" "+nomb+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MAIN ::= resPublic resStatic resVoid iden parA resString corA corC iden parC llaveA NT$4 COD2 llaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$4 ::= 
            {
              Object RESULT =null;
parser.al.add("\n\tmetodo publico estatico principal(Texto[] args){\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MET ::= ACCESO resVoid iden parA PARAM parC llaveA NT$3 COD2 SALIDA llaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		parser.al.add("\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$3 ::= 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
parser.metodo++;if(num==null){num="";}parser.al.add("\n\tmetodo "+acc+" "+nomb+"("+num+"){\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MET ::= ACCESO TIPO iden parA PARAM parC llaveA NT$2 COD2 SALIDA llaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		parser.al.add("\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$2 ::= 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
if(tipo=="entero"){parser.funcionInt++;}
                                                                   if(tipo=="Texto"){parser.funcionString++;}
                                                                   if(tipo=="booleano"){parser.funcionBool++;}
                                                                   if(tipo=="decimal"){parser.funcionDouble++;}
                                                                   if(tipo=="caracter"){parser.funcionChar++;}
                                                                   if(acc=="publico"){acc="publica";}
                                                                   if(acc=="privado"){acc="privada";}
                                                                   if(acc=="protegido"){acc="protegida";}
                                                                   if(num==null){num="";}parser.al.add("\n\tfuncion "+acc+" de "+tipo+" "+nomb+"("+num+"){\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COD2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COD2 ::= error puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COD2 ::= error llaveC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COD2 ::= BRECON COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COD2 ::= INSTANCIA COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COD2 ::= LLAM COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COD2 ::= SENTENCIAS COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COD2 ::= ASIGNACION COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COD2 ::= DECLARACION COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COD ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COD ::= error puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COD ::= error llaveC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COD ::= INSTANCIA COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COD ::= LLAM COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COD ::= SENTENCIAS COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COD ::= ASIGNACION COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COD ::= DECLARACION COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COD ::= MAIN COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COD ::= MET COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CLASS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CLASS ::= ACCESO resClass iden llaveA NT$1 COD llaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		parser.al.add("}");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$1 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
parser.al.add("\nclase publica "+val+"{\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALOR ::= caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALOR ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALOR ::= bool 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOR ::= cadena 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPREL ::= EXP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPREL ::= EXP diferente EXP EXPSENT 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(e==null){e="";}RESULT=val1+"!="+val2+e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPREL ::= EXP igualIgual EXP EXPSENT 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(e==null){e="";}RESULT=val1+"=="+val2+e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPREL ::= EXP menorIgual EXP EXPSENT 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(e==null){e="";}RESULT=val1+"<="+val2+e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPREL ::= EXP mayorIgual EXP EXPSENT 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(e==null){e="";}RESULT=val1+">="+val2+e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPREL ::= EXP menorq EXP EXPSENT 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(e==null){e="";}RESULT=val1+"<"+val2+e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPREL ::= EXP mayorq EXP EXPSENT 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(e==null){e="";}RESULT=val1+">"+val2+e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPSENT ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPSENT ::= OPREL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPSENT ::= not OPREL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="!"+val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPSENT ::= or OPREL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=" || "+val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPSENT ::= and OPREL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=" && "+val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= VALOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= VALOR decre 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=val+"--";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= VALOR incre 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=val+"++";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= VALOR parA PARAM parC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		if(val2==null){val2="";}RESULT=""+val1+"("+val2+")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= parA VALOR modulo EXP parC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT="("+val+"%"+val2+")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= parA VALOR div EXP parC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT="("+val+"/"+val2+")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= parA VALOR mul EXP parC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT="("+val+"*"+val2+")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= parA VALOR menos EXP parC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT="("+val+"-"+val2+")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= parA VALOR mas EXP parC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT="("+val+"+"+val2+")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= parA VALOR parC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT="("+val+")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= EXP modulo EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= EXP mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IGUALACION ::= igual 
            {
              Object RESULT =null;
		RESULT="=";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IGUALACION ::= mul igual 
            {
              Object RESULT =null;
		RESULT="*=";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IGUALACION ::= menos igual 
            {
              Object RESULT =null;
		RESULT="-=";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IGUALACION ::= mas igual 
            {
              Object RESULT =null;
		RESULT="+=";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPIMP ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPIMP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPIMP ::= EXPIMP punto mul 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=val1+".*";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPIMP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPIMP ::= EXPIMP punto EXPIMP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"."+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPIMP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORT ::= resImport EXPIMP puntoYcoma NT$0 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
parser.impor++;parser.al.add("importar "+val+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CLASS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

